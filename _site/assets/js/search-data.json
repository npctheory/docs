{"0": {
    "doc": "DemoAppMvc",
    "title": "DemoAppMvc",
    "content": "Новый репозиторий . git init git add . git commit -m \"init\" git remote add origin https://github.com/aq-coding/DemoAppMvc.git git push -u origin master . Новая ветка . git checkout -b dev git add . git commit -m \"init\" git push origin dev . ",
    "url": "/tutorial_pages/AppEmployeeManagement/0.%20Root.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/0.%20Root.html"
  },"1": {
    "doc": "1. Список и история бранчхедов",
    "title": "1. Список и история бранчхедов",
    "content": "Вывести список бранчхедов с номерами коммитов git branch -v . cat .git/refs/heads/master Показать номер коммита, на котором вершина master . История перемещений бранчхеда git reflot история перемещений HEAD git reflog master Вывести историю перемещений вершины master git reflog --date=iso с другим форматом даты . Время жизни логов . gc.reflogExpire gc.reflogExpireUnreachableЦ . Список бранчхедов отсортированных по новизне последнего коммита how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit . ",
    "url": "/manual_pages/Git%20Branching/1.%20Branch%20head%20list%20and%20history.html",
    "relUrl": "/manual_pages/Git%20Branching/1.%20Branch%20head%20list%20and%20history.html"
  },"2": {
    "doc": "1. Docker Tim Corey",
    "title": "1. Docker Tim Corey",
    "content": "Создать index.md В той же папке создать Dockerfile . # COPY ./html/ Скопировать всё из папки html и имидж, в папку /usr/local/apache2/htdocs/ FROM httpd:alpine COPY ./html/ /usr/local/apache2/htdocs/ . имидж - это ридонли билд docker build -t hello-docker:1.0.0 . Из dockerfile рабочей директории создать имидж с именем hello-docker и тегом 1.0.0 -t или --tag нейм и тэг для имиджа в формате name:tage docker image history e2e4 лог процесса билда имиджа по шагам. Выполнить после docker build . docker run --name first-container -p 8080:80 запустить контейнер 8080 внутри - 80 внутри docker stop e2e4 остановить контейнер docker rm e2e4 удалить контейнер . После изменения в файлах надо создавать новый имидж. Можно оставить название и поменять версию. docker build -t hello-docker:1.0.1 . docker run -d --name first-container -p 8081:80 hello-docker:1.0.0 docker run -d --name second-container -p 8080:80 hello-docker:1.0.1 . RabbitMQ . docker run -d --hostname my-rabbit --name some-rabbit -p 8080:15672 rabbitmq:3-management -d disconnected --hostname нужно для rabbitmq --name имя контейнера -p 8080 снаружи для порта 15672 внутри :3-management имидж с rabbitmq и менеджмент-интерфейсом . Логин: guest Пароль: guest . Скачать имидж mysql не создавай контейнер . docker pull mysql . ",
    "url": "/manual_pages/Docker/grand_children/1.%20DockerTimcorey.html",
    "relUrl": "/manual_pages/Docker/grand_children/1.%20DockerTimcorey.html"
  },"3": {
    "doc": "1. Github создание репозитория",
    "title": "1. Github создание репозитория",
    "content": "Новый репозиторий на Github . New Repository, Create Repository на Github .gitignore Visual Studio Initialize with Readme.md Лицензия MIT Clone or download, Clone with https . git clone ... cd ./EmployeeManagement/ . ",
    "url": "/tutorial_pages/AppEmployeeManagement/1.%20Github.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/1.%20Github.html"
  },"4": {
    "doc": "1. Просмотреть всё дерево коммитов",
    "title": "1. Просмотреть всё дерево коммитов",
    "content": "Вывести дерево коммитов git log Показать все коммиты от HEAD вниз git log master Показать все коммиты от вершины master вниз git log --oneline номер, ветка, заголовок git log --follow index.html все коммиты, где менялся index.html git log --no-decorate Не показывать бранчхеды и HEAD git log --pretty=format:'%h %cd | %s%d [%an]' &lt;id коммита&gt; &lt;дата&gt; | &lt;заголовок&gt; &lt;декорирование(ссылки)&gt; [имя автора] . git log --pretty=format:'%C(yellow)%h %C(dim green)%ad %C(reset)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' . Алиасы для красивого git log Алиас git lg git config --global alias.lg 'log --pretty=format:'%C(yellow)%h %C(dim green)%ad %C(reset)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' Вывести список коммитов ниже указанного коммита или бранчхеда git log master вывести все коммиты от корня до бранчхеда мастер git log master feature вывести все коммиты от корня до бранчхедов feautre и master . Вывести списка коммитов с regex-фильтром git log --grep добавил найти коммиты со словом ‘добавил’ git log --grep добавил -i отключить регистрозависимость git log --grep добавил --grep удалил найти коммиты, где в мессадже есть или слово ‘добавил’ или слово ‘удалил’ git log --grep добавил --grep удалил --all-match найти коммиты, которые матчатся с обоими выражениями . Поиск по изменениям в файлах документация git log -G\"регулярноевыражения\" -p git log -L . Включить перловые regex . git config --global grep.patternType perl . История изменений внутри файла между строчками regex1 и regex2: Git Log -L git log -L '/&lt;head&gt;/','&lt;\\/head&gt;/':index.html история изменений внутри тега head в index.html . Вывести историю движения ветки git log --oneline -g показывает движения веток и HEAD он же git reflog show . Вывести автора изменения между строчками x и y git blame index.html -L x,y . Показать данные об одном коммите git show @~ один коммит назад git show master~ . Найти коммит со словом в описании git show :/sayBye . Список коммитов от коммита xxxx до HEAD how-to-list-commits-since-certain-commit . Список коммитов одного пользователя how-can-i-view-a-git-log-of-just-one-users-commits . Красивый графы pretty-git-branch-graphs . nano ~/.gitconfig . [alias] lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all lg = !\"git lg1\" ",
    "url": "/manual_pages/Git/1.%20List%20all%20commits.html",
    "relUrl": "/manual_pages/Git/1.%20List%20all%20commits.html"
  },"5": {
    "doc": "RecipeBook",
    "title": "RecipeBook",
    "content": "Вопросы . Как удалять пакеты nuget, проекты из cолюшена через vscode code . открыть vscode explorer . открыть проводник shift+alt+вниз скопировать строку вниз . Github и создание солюшена . git clone https://github.com/npctheory/ASPNetCoreTutorial.git cd ./ASPNetCoreTutorial dotnet new sln --name ASPNetCoreTutorial dotnet new web -o aspnetserver dotnet sln add ./aspnetserver dotnet run -lp \"https\" . Добавление Entity Framework, Sqlite, обновление swagger . cd aspnetserver/ dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.Design dotnet add package Microsoft.EntityFrameworkCore.Sqlite dotnet add package Swashbuckle.AspNetCore cd .. Добавление миграции . cd aspnetserver/ dotnet ef migrations add FirstMigration -o Data/Migrations cd .. Swagger . Удалить из launchsettings.json всю строку launchUrl . React . npx create-react-app reactclient cd ./reactclient/ npm install --save cross-env ./reactclient/package.json . Использовать другой браузер “scripts”: “start”: “cross-env BROWSER=’msedge.exe’ react-scripts start” . react запуск . npm start . Экстеншны react . Bracket Pair Colorizer 2 EditorConfig for VS Code ES7 React/Redux/GraphQL/React Native Snippets . Material Icon Theme иконки ./reactclient/src/ . touch .editorconfig . Удалить в папке src всё кроме App.js и index.js . React-Bootstrap . npm install --save bootstrap . Запуск React . npm start . ",
    "url": "/tutorial_pages/ASPNetCoreReactTutorial/1.%20Solution.html",
    "relUrl": "/tutorial_pages/ASPNetCoreReactTutorial/1.%20Solution.html"
  },"6": {
    "doc": "RecipeBook",
    "title": "RecipeBook",
    "content": "Вопросы . Как удалять . Github и создание солюшена . git clone https://github.com/npctheory/RecipeBook.git cd ./RecipeBook dotnet new sln --name RecipeBook dotnet new web -o Api dotnet sln add ./Api dotnet new classlib -o Domain dotnet sln add ./Domain dotnet build . ApiKey в appsettings.json . \"ApiKey\": \"FAkeKey123\" . ApiKey в appsettings.Development.json . \"ApiKey\": \"FAkeKey321\" . Создать docker файл и docker compose . Ctrl+Shift+P -&gt; Add Docker Files to Workspace -&gt; ASP.NET Core Add docker compose -&gt; Yes . docker compose up ./Api/Controllers/RecipeController.cs . ",
    "url": "/tutorial_pages/RecipeBook/1.%20Solution.html",
    "relUrl": "/tutorial_pages/RecipeBook/1.%20Solution.html"
  },"7": {
    "doc": "1. VS Code",
    "title": "1. VS Code",
    "content": "Глобально установить расширения VS Code Настройка расширения Omnisharp . | Enable/disable default C# formatter. Alt+Shift+F Автоформатированние | Csharp &gt; References Code Lens: Filtered Symbols | OmniSharp: Use Modern Net | . code --install-extension adrianwilczynski.user-secrets code --install-extension ms-dotnettools.csharp code --install-extension k--kato.docomment code --install-extension streetsidesoftware.code-spell-checker code --install-extension EditorConfig.EditorConfig code --install-extension ritwickdey.LiveServer code --install-extension christian-kohler.path-intellisense code --install-extension vscode-icons-team.vscode-icons code --install-extension redhat.vscode-yaml code --install-extension mhutchie.git-graph code --install extension donjayamanne.githistory code --install extension redhat.vscode-yaml .vscode Сделать, чтобы при запуске консоль открывалась в отдельном окне “console”:”externalTerminal” . ",
    "url": "/tutorial_pages/AppOpenLoops/1.%20VS%20Code.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/1.%20VS%20Code.html"
  },"8": {
    "doc": "10. Мердж",
    "title": "10. Мердж",
    "content": "Fast-Forward . git merge fix Если ветка fix выше чем ветка ‘master’, на которой стоит HEAD - подвинет master вместе с HEAD на коммит fix. fix не удаляется. Дальше можно переместить HEAD на fix через git checkout fix . cat .git/ORIG_HEAD покажет id предыдущего положения HEAD git branch -f master ORIG_HEAD вернуть master где она была . Истинный мердж . Когда один бранчхед не входит в ветку другого. HEAD стоит на master, мердж с feature. git status должен быть пустой. git diff --name-only master feature покажет какие файлы различаются. git merge-base master feature покажет на каком коммите была развилка. git merge feature анализирует изменение в каждом файле. Пробует auto-merge . CONFLICT . Если мердж прервался cat .git/MERGE_HEAD покажет id коммита, с которым мы мерджились, но возник конфликт. git show e2e4:index.html git show master:index.html git show feature:index.html покажут версии файлов в разных бранчхедах. 7.1-7.2 . git checkout --ours git checkout --theirs git checkout --merge git merge --abort git checkout --conflict=diff3 --merge index.html git merge --continue . ",
    "url": "/manual_pages/Git/10.%20Merge.html",
    "relUrl": "/manual_pages/Git/10.%20Merge.html"
  },"9": {
    "doc": "10. Интеграционные тесты",
    "title": "10. Интеграционные тесты",
    "content": "XUnit. Интеграционное тестирование . dotnet new xunit -o ./IntegrationTests/ dotnet sln add ./IntegrationTests/ cd ./IntegrationTests/ dotnet add reference ../API/ dotnet add package Microsoft.AspNetCore.Mvc.Testing --version 7.0.3 cd .. cd ./DataAccess/ cd .. API/Program.cs . Добавить в конец файла: . public partial class Program{} . IntegrationTests/OpenLoopsControllerTests.cs . ",
    "url": "/tutorial_pages/AppOpenLoops/10.%20%D0%98%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5%20%D1%82%D0%B5%D1%81%D1%82%D1%8B.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/10.%20%D0%98%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5%20%D1%82%D0%B5%D1%81%D1%82%D1%8B.html"
  },"10": {
    "doc": "Видео 1-3",
    "title": "Видео 1-3",
    "content": "Второе занятие . https://github.com/cleannetcode/Index/discussions/30 . Третье занятие . Главы Меtanit Паттерны refactoring.guru Ilya Eliseev. Space Cards . Четвертое занятие . https://github.com/cleannetcode/Index/discussions/30 flyway - генератор миграций Alt+Shift+F форматировать код Кодинг . ",
    "url": "/tutorial_pages/AppOpenLoops/100.%201-3.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/100.%201-3.html"
  },"11": {
    "doc": "Резюме",
    "title": "Разработчик С#/React.js(TypeScript)",
    "content": ".NET 7 . ASP.NET: Web Api, Blazor, Razor Pages, MVC(Razor Views) .NET Framework / Mono . ASP.NET Webforms, ASP.NET MVC 5 . Microsoft Sql Server . Dapper, NHibernate, Entity Framework . PostgreSQL . SQLite . Контроль версий . Git: Git Submodule, Git Hooks Branching: Git Flow, GitHub Flow, Conventional Commits, Semantic Commits . GitHub: GitHub Actions: Dependabot, Renovatebot . GitHub Pages/GitHub Wikis: Markdown(Kramdown, GFM), coveralls.io, shields.io Генерация статических сайтов: Jekyll, Gatsby . CI/CD . Jenkins Appveyor Octopus Deploy . Контейнеризация . Docker: Dockerfile, Docker Compose, Docker Swarm Kubernetes: . Таск-трекеры . Jira, Bitrix24 . Вики-системы . Confluence MediaWiki . ",
    "url": "/leftmenu/100000.%20Resume.html#%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA-%D1%81reactjstypescript",
    "relUrl": "/leftmenu/100000.%20Resume.html#разработчик-сreactjstypescript"
  },"12": {
    "doc": "Резюме",
    "title": "Резюме",
    "content": " ",
    "url": "/leftmenu/100000.%20Resume.html",
    "relUrl": "/leftmenu/100000.%20Resume.html"
  },"13": {
    "doc": "Видео 3-4",
    "title": "Видео 3-4",
    "content": "Видео 3-4 . git clone ... cd ./automatic-broccoli dotnet new console -o AutomaticBroccoli.CLI . AutomaticBroccoli.CLI/OpenLoop.cs . using System.Text.Json; public class OpenLoop { public string Note { get; set; } public DateTimeOffset CreatedDate { get; set; } } public class OpenLoopsRepository { private const string DirectoryName = \"./openLoops/\"; public bool Add(OpenLoop newOpenLoop) { Directory.CreateDirectory(DirectoryName); var json = JsonSerializer.Serialize(newOpenLoop, new JsonSerializerOptions{WriteIndented = true}); var fileName = $\"{Guid.NewGuid()}.json\"; var filePath = Path.Combine(DirectoryName, fileName); File.WriteAllText(filePath, json); return true; } public OpenLoop[] Get() { var files = Directory.GetFiles(DirectoryName); var openLoopsList = new List&lt;OpenLoop&gt;(); foreach(var file in files) { var json = File.ReadAllText(file); var openLoop = JsonSerializer.Deserialize&lt;OpenLoop&gt;(json); if(openLoop == null) { throw new Exception(\"OpenLoop cannot be deserialized\"); } openLoopsList.Add(openLoop); } return openLoopsList.ToArray(); } } . AutomaticBroccoli.CLI/Program.cs . using System.Text; Console.OutputEncoding = Encoding.UTF8; Console.InputEncoding = Encoding.Unicode; var openLoopsRepository = new OpenLoopsRepository(); { Console.WriteLine(\"Что вас беспокоит сейчас?\"); string? note = null; do{ note = Console.ReadLine(); } while(string.IsNullOrWhiteSpace(note)); var openLoop = new OpenLoop{ Note = note, CreatedDate = DateTimeOffset.UtcNow }; openLoopsRepository.Add(openLoop); } { var openLoops = openLoopsRepository.Get(); var group = openLoops.GroupBy(x =&gt; new DateTime(x.CreatedDate.Year, x.CreatedDate.Month, x.CreatedDate.Day)); foreach(var groupOfOpenLoops in group) { System.Console.WriteLine($\"Ваши заботы за: {groupOfOpenLoops.Key:dd.MM.yyyy}\"); foreach(var openLoop in groupOfOpenLoops.ToArray()) { Console.WriteLine(openLoop.Note); } } } . ",
    "url": "/tutorial_pages/AppOpenLoops/101.%203-4.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/101.%203-4.html"
  },"14": {
    "doc": "101. Dockerfile Examples",
    "title": "101. Dockerfile Examples",
    "content": "Apache . Установить имидж апач Скопировать все файлы из подпапки проекта html В папку /usr/local/apache2/htdocs/ . FROM httpd:alpine COPY ./html/ /usr/local/apache2/htdocs/ . Ubuntu+Apache . Установить имидж Ubuntu Внутри него поставить apache2 . FROM ubuntu:20.04 RUN apt-get -y update RUN apt-get -y install apache2 RUN echo `Hello World from Docker! &gt; /var/www/html/index.html` CMD [\"/usr/sbin/apache2ctl\", \"-DFOREGROUND\"] EXPOSE 80 . ",
    "url": "/manual_pages/Docker/101.%20Dockerfile%20Examples.html",
    "relUrl": "/manual_pages/Docker/101.%20Dockerfile%20Examples.html"
  },"15": {
    "doc": "Видео 5",
    "title": "Видео 5",
    "content": "Видео 5 . eShop on Containers . dotnet new webapi -o AutomaticBroccoli.API dotnet new classlib -o AutomaticBroccoli.DataAccess dotnet new sln -n AutomaticBroccoli dotnet sln add ./AutomaticBroccoli.API dotnet sln add ./AutomaticBroccoli.CLI dotnet sln add ./AutomaticBroccoli.DataAccess cd ./AutomaticBroccoli.API dotnet add reference ../AutomaticBroccoli.DataAccess cd .. cd ./AutomaticBroccoli.CLI dotnet add reference ../AutomaticBroccoli.DataAccess cd .. Перенести OpenLoop.cs, OpenLoopsRepository.cs в ./AutomaticBroccoli.DataAccess . cd ./AutomaticBroccoli.API dotnet watch . ",
    "url": "/tutorial_pages/AppOpenLoops/102.%205.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/102.%205.html"
  },"16": {
    "doc": "102. Dockerfile Commands",
    "title": "102. Dockerfile Commands",
    "content": "FROM . ENV . Лучше объявлять переменные окружения в docker . RUN . Для выполнения linux-команд RUN-команд может быть несколько. CMD - одна . COPY . Копирует файлы с хоста в контейнер . CMD . Точка входа в контейнер. Для запуска пэйлоада контейнера . ",
    "url": "/manual_pages/Docker/102.%20Dockerfile%20Commands.html",
    "relUrl": "/manual_pages/Docker/102.%20Dockerfile%20Commands.html"
  },"17": {
    "doc": "103. CLI Images",
    "title": "103. CLI Images",
    "content": "Вывести список имиджей . docker images docker image history e2e4 Посмотреть из каких слоев сделан имидж с IMAGE ID e2e4 docker search nginx найти на докерхабе имидж tomcat . Скачать существующий имидж . docker pull Как docker, но без создания контейнера . Создать имидж из Dockerfile в текущей папке . docker build -t demo-app:1.0.0 . Сохранить контейнер с CONTAINER ID e4e5 в имидж img1:v2 . docker commit e4e5 demo-app:v2 . Создать копию имиджа с другим тегом . docker tag demo-app:v1 demo-app:copy Создаст новый имидж img1:copy . Удалить . docker rmi e2e4 e2e4 это IMAGE ID из docker images. Можно имя имиджа . ",
    "url": "/manual_pages/Docker/103.%20CLI%20Images.html",
    "relUrl": "/manual_pages/Docker/103.%20CLI%20Images.html"
  },"18": {
    "doc": "104. CLI Containers",
    "title": "104. CLI Containers",
    "content": "Запуск контейнера из имиджа . docker run -d --name firstcontainer -p 8081:80 hello-docker:1.0.0 Из имиджа hello-docker запустить контейнер firstcontainer Порт 80 внутреннего приложения открыт как порт 8080 докер-энджина Совмещает в себе docker pull и docker start . Список контейнеров (включенных и выключенных) . docker ps -a . Остановка и запуск остановленного контенера . docker stop e2e4 остановить контейнер с CONTAINER ID e2e4 docker start e2e4 запустить остановленный контейнер . Сделать имидж из запущенного контейнера . Зайти в detached-контейнер в интерактивном режиме . docker exec -it e4e5 /bin/bash залогиниться в уже запущенный контейнер и запустить bash docker exec -it e4e5 /bin/sh если нет bash - выбрать sh exit (внутри контейнера) выйти docker commit e4e5 img1:v2 Сохранить контейнер с CONTAINER ID e4e5 в имидж img1:v2 . Удаление контейнеров . docker stop e2e4 остановить контейнер с CONTAINER ID e2e4 docker rm e2e4 удалить контейне docker stop $(docker ps -a -q) остановить все контейнеры docker rm $(docker ps -a -q) удалить все контейнеры . ",
    "url": "/manual_pages/Docker/104.%20CLI%20Containers.html",
    "relUrl": "/manual_pages/Docker/104.%20CLI%20Containers.html"
  },"19": {
    "doc": "105. Docker Compose",
    "title": "105. Docker Compose",
    "content": "Docker Compose . Автоматически создает docker network для контейнеров в yml-файле . ",
    "url": "/manual_pages/Docker/105.%20Docker%20Compose.html",
    "relUrl": "/manual_pages/Docker/105.%20Docker%20Compose.html"
  },"20": {
    "doc": "106. CLI Network",
    "title": "106. CLI Network",
    "content": "Вывести сеть докера docker network ls . ",
    "url": "/manual_pages/Docker/106.%20CLI%20Network.html",
    "relUrl": "/manual_pages/Docker/106.%20CLI%20Network.html"
  },"21": {
    "doc": "11. Подвинуть/удалить ветку",
    "title": "Удаление ветки",
    "content": "git branch -d fix Удалить ветку fix Сработает только если ветка посередине графа git branch -D fix игнорирует положение вершины . git reset для того чтобы, не трогая WT, откатывать индекс + двигать ветку+HEAD . ",
    "url": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#%D1%83%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B8",
    "relUrl": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#удаление-ветки"
  },"22": {
    "doc": "11. Подвинуть/удалить ветку",
    "title": "Git Reset --soft &lt;commit&gt;",
    "content": "Двигает вершину бранчи, и вместе с ней HEAD. WT + Индекс не остаются как были. Используется для того чтобы упаковать несколько предыдущих коммитов в один новый. git reset --soft 9e5e Подвинуть вершину бранчи и вместе с ней HEAD, в коммит 9e5e git reset --soft HEAD~ Подвинуть вершину бранчи и вместе с ней HEAD на один коммит назад . ",
    "url": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#git-reset---soft-commit",
    "relUrl": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#git-reset---soft-commit"
  },"23": {
    "doc": "11. Подвинуть/удалить ветку",
    "title": "Git Reset [--mixed] &lt;commit&gt; (по умолчанию)",
    "content": "То же что --soft, но сбрасыва индекс текущего коммита git reset 9e5e Подвинуть вершину бранчи, HEAD, изменить Index на коммит 9e5e git reset 9e5e --mixed -||- git reset HEAD Откатить индекс до состояние прошлого коммита. Использовать после git add . чтобы отменить лишнее проиндексированное git reset HEAD .idea Убрать из staginng файлы .idea . ",
    "url": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#git-reset---mixed-commit-%D0%BF%D0%BE-%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E",
    "relUrl": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#git-reset---mixed-commit-по-умолчанию"
  },"24": {
    "doc": "11. Подвинуть/удалить ветку",
    "title": "Git Reset --hard &lt;commit&gt;",
    "content": "git reset --hard 2fad Для того, чтоб отменить вообще всё сделанное после коммита 2fad - вернуть текущую вершину[master] и HEAD вместе с ней на коммит 2fad. Коммиты, оставшиеся выше, останутся в анонимной ветке. Если запомнить номер коммита (найти через cat .git/ORIG_HEAD или в git reflog) можно вернуть master и HEAD обратно так же чере git reset --hard. git reset --hard HEAD . ",
    "url": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#git-reset---hard-commit",
    "relUrl": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html#git-reset---hard-commit"
  },"25": {
    "doc": "11. Подвинуть/удалить ветку",
    "title": "11. Подвинуть/удалить ветку",
    "content": "Git Branch не умеет переносить ветку, на которой мы сейчас находимся . Reset Demystified . ",
    "url": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html",
    "relUrl": "/manual_pages/Git%20Branching/11.%20Branch%20Update%20Delete.html"
  },"26": {
    "doc": "Git",
    "title": "Git",
    "content": "Новый репозиторий . git init git add . git commit -m \"init\" git remote add origin https://github.com/aq-coding/имярепозитория.git git push -u origin master . Новая ветка . git checkout -b dev git add . git commit -m \"init\" git push origin dev . ",
    "url": "/leftmenu/11.%20Git.html",
    "relUrl": "/leftmenu/11.%20Git.html"
  },"27": {
    "doc": "11. База данных",
    "title": "11. База данных",
    "content": "Dockerfile . docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres . docker-compose.yml . version: '3.1' services: broccoli_db: container_name: broccoli_db image: postgres restart: always environment: POSTGRES_PASSWORD: example123 ports: - 15432:5432 . broccoli_adminer: container_name: broccoli_adminer image: adminer restart: always ports: - 18080:8080 broccoli_pgadmin: container_name: broccoli_pgadmin image: pgadmin4 restart: always ports: - 10443:443 . docker compose up -d . localhost:18080 для подключения по вебу Есть плагин azure data studios: postgres . localhost postgres example123 . CREATE DATABASE \"test-db\"; CREATE TABLE \"Users\" ( \"Id\" SERIAL PRIMARY KEY, \"Login\" VARCHAR(200), \"PasswordHash\" VARCHAR(500) ); CREATE TABLE \"UserDetails\" ( \"UserId\" SERIAL PRIMARY KEY REFERENCES \"Users\"(\"Id\"), \"Nickname\" VARCHAR(200) NOT NULL, \"Bio\" VARCHAR(500) NOT NULL ); CREATE TABLE \"Books\" ( \"Id\" SERIAL PRIMARY KEY, \"Name\" VARCHAR(200) NOT NULL ); CREATE TABLE \"ReservedBooks\" ( \"UserId\" SERIAL REFERENCES \"Users\"(\"Id\"), \"BookId\" SERIAL REFERENCES \"Books\"(\"Id\"), \"CreatedDate\" TIMESTAMP WITH TIME ZONE, \"UpdatedDate\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"UserId\", \"BookId\") ); INSERT INTO \"Users\" (\"Login\", \"PasswordHash\") VALUES ('test-login', 'abcdabcdabcdabcd about user'); INSERT INTO \"UserDetails\" (\"Nickname\", \"Bio\") VALUES ('test-nickname', 'test-description'); INSERT INTO \"Books\" (\"Name\") VALUES ('test-book'); INSERT INTO \"ReservedBooks\" (\"UserId\", \"BookId\", \"CreatedDate\", \"UpdatedDate\") VALUES (1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP); SELECT u.\"Id\", ud.\"Nickname\", b.\"Name\", rb.\"CreatedDate\" FROM \"Users\" AS u INNER JOIN \"UserDetails\" AS ud ON ud.\"UserId\" = u.\"Id\" INNER JOIN \"ReservedBooks\" AS rb ON rb.\"UserId\" = u.\"Id\" INNER JOIN \"Books\" AS b ON rb.\"BookId\" = b.\"Id\" SELECT * FROM pg_stat_statements . ",
    "url": "/tutorial_pages/AppOpenLoops/11.%20Postgres+Docker.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/11.%20Postgres+Docker.html"
  },"28": {
    "doc": "11. Валидация",
    "title": "11. Валидация",
    "content": "using System.ComponentModel.DataAnnotations; public class Employee { public int Id { get; set; } [Required] [MaxLength(50,ErrorMessage =\"Name cannot exceed 50\")] public string Name { get; set; } [Required] [EmailAddress(ErrorMessage = \"Email invalid\")] [Display(Name=\"Office Email\")] public string Email { get; set; } [Required] public Dept? Departament { get; set; } public string? PhotoPath { get; set; } } . ",
    "url": "/tutorial_pages/AppEmployeeManagement/11.%20%D0%92%D0%B0%D0%BB%D0%B8%D0%B4%D0%B0%D1%86%D0%B8%D1%8F.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/11.%20%D0%92%D0%B0%D0%BB%D0%B8%D0%B4%D0%B0%D1%86%D0%B8%D1%8F.html"
  },"29": {
    "doc": "111. Dockerignore",
    "title": "111. Dockerignore",
    "content": " ",
    "url": "/manual_pages/Docker/111.%20Dockerignore.html",
    "relUrl": "/manual_pages/Docker/111.%20Dockerignore.html"
  },"30": {
    "doc": "12. EF & Sql Repository",
    "title": "12. EF & Sql Repository",
    "content": "Nuget ./Mvc/appsettings.json ./Mvc/Models/AppDbContext.cs ./Mvc/Program.cs ./Mvc/Models/ModelBuilderExtensions.cs Миграции ./Mvc/Models/SqlServerRepository.cs . Nuget . Установить Microsoft.EntityFrameworkCore.SqlServer . cd ./Mvc/ dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Tools cd ../Mvc/appsettings.json . { \"ConnectionStrings\": { \"EmployeeDbConnection\" : \"server=(localdb)\\\\MSSQLLocalDB;database=EmployeeDb;Trusted_Connection=true\" } } ./Mvc/AppDbContext.cs . using Microsoft.EntityFrameworkCore; public class AppDbContext : DbContext { public AppDbContext(DbContextOptions&lt;AppDbContext&gt; options) : base(options) { } public DbSet&lt;Employee&gt; Employees {get; set;} protected override void OnModelCreating(ModelBuilder builder) { base.OnModelCreating(builder); builder.Seed(); } } ./Mvc/Program.cs . Получить имя сервера SQL Express - утилита MSSQLLocalDB . using Microsoft.EntityFrameworkCore; var builder = WebApplication.CreateBuilder(args); builder.Services.AddDbContext&lt;AppDbContext&gt;(options =&gt; options.UseSqlServer( builder.Configuration.GetConnectionString(\"EmployeeDbConnection\") )); builder.Services.AddScoped&lt;IEmployeeRepository, SqlServerRepository&gt;(); builder.Services.AddControllersWithViews(); var app = builder.Build(); app.UseStaticFiles(); app.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); app.Run(); ./Mvc/Models/ModelBuilderExtensions.cs . using Microsoft.EntityFrameworkCore; public static class ModelBuilderExtensions { public static void Seed(this ModelBuilder builder) { builder.Entity&lt;Employee&gt;().HasData( new Employee{ Id = 1, Name = \"Alice\", Departament = Dept.IT, Email = \"alice@example.com\" }, new Employee{ Id = 2, Name = \"Bob\", Departament = Dept.IT, Email = \"bob@example.com\" }, new Employee{ Id = 3, Name = \"Charlie\", Departament = Dept.IT, Email = \"charlie@example.com\" } ); } } ./Mvc/Models/SqlServerRepository.cs . public class SqlServerRepository : IEmployeeRepository { private readonly AppDbContext context; public SqlServerRepository(AppDbContext context) { this.context = context; } public Employee Add(Employee employee) { context.Employees.Add(employee); context.SaveChanges(); return employee; } public Employee Delete(int id) { Employee employee = context.Employees.Find(id); if(employee != null) { context.Employees.Remove(employee); context.SaveChanges(); } return employee; } public IEnumerable&lt;Employee&gt; GetAllEmployees() { return context.Employees; } public Employee GetEmployee(int Id) { return context.Employees.Find(Id); } public Employee Update(Employee employeeChanges) { var employee = context.Employees.Attach(employeeChanges); employee.State = Microsoft.EntityFrameworkCore.EntityState.Modified; context.SaveChanges(); return employeeChanges; } } . EF Migrations . dotnet ef migrations add \"init\" -s ./Mvc -p ./Mvc dotnet ef database update -s ./Mvc -p ./Mvc . ",
    "url": "/tutorial_pages/AppEmployeeManagement/12.%20EF%20SQL.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/12.%20EF%20SQL.html"
  },"31": {
    "doc": "12. База данных",
    "title": "12. База данных",
    "content": "dotnet ef dbcontext -h . Entity Framework . dotnet new classlib -o ./DataAccess.Postgres dotnet sln add cd ./DataAccess.Postgres/ dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 7.0.3 cd .. cd ./API/ dotnet add reference ../DataAccess.Postgres/ dotnet add package Microsoft.EntityFrameworkCore.Design --version 7.0.3 cd .. dotnet new tool-manifest dotnet tool install dotnet-ef dotnet build dotnet ef dbcontext info -s ./API -p ./DataAccess.Postgres --verbose . DataAccess.Postgres/Entities/User.cs . using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Metadata.Builders; namespace AutomaticBroccoli.DataAccess.Postgres; public sealed class User { public int Id { get; set; } public string Login { get; set; } public IList&lt;OpenLoop&gt; OpenLoops { get; set; } } public sealed class UserEntityConfiguration : IEntityTypeConfiguration&lt;User&gt; { public void Configure(EntityTypeBuilder&lt;User&gt; builder) { builder.HasKey(x =&gt; x.Id); builder.HasMany(x =&gt; x.OpenLoops) .WithOne(x =&gt; x.User) .HasForeignKey(x =&gt; x.UserId); } } . DataAccess.Postgres/Entities/OpenLoop.cs . using System.ComponentModel.DataAnnotations.Schema; namespace AutomaticBroccoli.DataAccess.Postgres; public sealed class OpenLoop { public Guid Id { get; set; } public string Note { get; set; } public DateTimeOffset CreatedDate { get; set; } [ForeignKey(nameof(User))] public int UserId { get; set; } public User User {get; set;} } . DataAccess.Postgres/DbContext.cs . using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Metadata.Builders; public class ApplicationBroccoliDbContext : DbContext { public ApplicationBroccoliDbContext(DbContextOptions&lt;ApplicationBroccoliDbContext&gt; options) : base(options) { } public DbSet&lt;OpenLoop&gt; OpenLoops { get; set; } public DbSet&lt;User&gt; Users { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.ApplyConfigurationsFromAssembly(this.GetType().Assembly); base.OnModelCreating(modelBuilder); } } . API/Program.cs . dotnet build . После того как выполнился dotnet build Добавить после builder.Services.AddSwaggerGen(); . builder.Services.AddDbContext&lt;AutomaticBroccoliDbContext&gt;(options =&gt; { options.UseNpgsql(builder.Configuration.GetConnectionString(nameof(ApplicationDbContext))); }); . API/ appsettings.json . Строку подключения взять на https://www.connectionstrings.com/postgresql/ . \"ConnectionStrings\": { \"ApplicationDbContext\": \"User ID=postgres;Password=example123;Host=localhost;Port=15432;Database=efdb;Pooling=true;Min Pool Size=0;Max Pool Size=100;Connection Lifetime=0;\" } . Миграция . dotnet ef migrations add Init -s ./API/ -p ./DataAccess.Posgres/ dotnet ef migrations script 0 -s ./API/ -p ./DataAccess.Posgres/ dotnet ef database update -s ./API/ -p ./DataAccess.Posgres/ . API/Controllers/OpenLoopsController.cs . ",
    "url": "/tutorial_pages/AppOpenLoops/12.%20EF.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/12.%20EF.html"
  },"32": {
    "doc": "Git Branching",
    "title": "Git Branching",
    "content": " ",
    "url": "/leftmenu/12.%20Git%20Branching.html",
    "relUrl": "/leftmenu/12.%20Git%20Branching.html"
  },"33": {
    "doc": "Git Remote",
    "title": "Git Remote",
    "content": " ",
    "url": "/leftmenu/13.%20Git%20Remote.html",
    "relUrl": "/leftmenu/13.%20Git%20Remote.html"
  },"34": {
    "doc": "13. Загрузка файлов в методе Create",
    "title": "13. Загрузка файлов в методе Create",
    "content": "./Mvc/ViewModels/EmployeeCreateViewModel.cs . using System.ComponentModel.DataAnnotations; public class EmployeeCreateViewModel { public int Id { get; set; } [Required] [MaxLength(50, ErrorMessage = \"Name cannot exceed 50\")] public string Name { get; set; } [Required] [EmailAddress(ErrorMessage = \"Email invalid\")] [Display(Name=\"Office Email\")] public string Email { get; set; } [Required] public Dept? Departament { get; set; } public IFormFile Photo { get; set; } } ./Mvc/Views/Home/Create.cshtml . Изменилась модель, и добавилось поле в форму . @model EmployeeCreateViewModel @inject IEmployeeRepository _empRepository @{ ViewBag.Title = \"Create Employee\"; } &lt;form enctype=\"multipart/form-data\" asp-controller=\"Home\" asp-action=\"Create\" method=\"post\"&gt; ... &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Photo\" class=\"form-label\"&gt;&lt;/label&gt; &lt;div class=\"imput-group\"&gt; &lt;input asp-for=\"Photo\" class=\"form-control custom-file-input\"/&gt; &lt;/div&gt; &lt;/div&gt; ... &lt;div asp-validation-summary=\"All\" class=\"text-danger\"&gt;&lt;/div&gt; &lt;/form&gt; ./Mvc/Controllers/HomeController.cs: Конструктор . IWebHostEnvironment инжектится для работы со свойством WebRootPath . private readonly IEmployeeRepository _employeeRepository; private readonly IWebHostEnvironment _hostingEnvironment; public HomeController(IEmployeeRepository employeeRepository, IWebHostEnvironment hostingEnvironment) { _employeeRepository = employeeRepository; _hostingEnvironment = hostingEnvironment; } ./Mvc/Controllers/HomeController.cs: Метод Create . Добавлется загрузка файла . [HttpPost] public IActionResult Create(EmployeeCreateViewModel model) { if (ModelState.IsValid) { string uniqueFileName = null; if(model.Photo != null) { string uploadsFolder = Path.Combine(_hostingEnvironment.WebRootPath, \"images\"); uniqueFileName = Guid.NewGuid().ToString() + \"_\" + model.Photo.FileName; string filePath = Path.Combine(uploadsFolder, uniqueFileName); model.Photo.CopyTo(new FileStream(filePath, FileMode.Create)); } Employee newEmployee = new Employee { Name = model.Name, Email = model.Email, Departament = model.Departament, PhotoPath = uniqueFileName }; _employeeRepository.Add(newEmployee); return RedirectToAction(\"details\", new { id = newEmployee.Id }); } return View(); } ./Mvc/Views/Home/Details.cshtml . @model HomeDetailsViewModel @{ ViewBag.Title = \"Employee Details\"; var photoPath = \"/images/\" + (Model.Employee.PhotoPath ?? \"noimage.jpg\"); } @{ ViewBag.Title = \"Employee Details\"; } &lt;div class=\"row justify-content-center m-3\"&gt; &lt;div class=\"col-sm-8\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-header\"&gt; &lt;h1&gt;@Model.Employee.Name&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"card-body text-center\"&gt; &lt;img class=\"card-img-top\" src=\"@photoPath\" /&gt; &lt;h4&gt;Employee ID : @Model.Employee.Id&lt;/h4&gt; &lt;h4&gt;Email : @Model.Employee.Email&lt;/h4&gt; &lt;h4&gt;Departament : @Model.Employee.Departament&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"card-footer text-center\"&gt; &lt;a asp-controller=\"home\" asp-action=\"index\" class=\"btn btn-primary\"&gt;Back&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ./Mvc/Views/Home/Index.cshtml . @model IEnumerable&lt;Employee&gt; @{ ViewBag.Title = \"Employee List\"; } &lt;div class=\"row row-cols-1 row-cols-md-3 g-4 mt-3\"&gt; @foreach (var employee in Model) { var photoPath = \"images/\" + (employee.PhotoPath ?? \"noimage.jpg\"); &lt;div class=\"col\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-header\"&gt; &lt;h5 class=\"card-title\"&gt;@employee.Name&lt;/h5&gt; &lt;/div&gt; &lt;img class=\"card-img-top\" src=\"@photoPath\" asp-append-version=true /&gt; &lt;div class=\"card-footer text-center\"&gt; &lt;a asp-controller=\"home\" asp-action=\"details\" asp-route-id=\"@employee.Id\" class=\"btn btn-primary m-1\"&gt;View&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; } &lt;/div&gt; . ",
    "url": "/tutorial_pages/AppEmployeeManagement/13.%20HomeController-Create.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/13.%20HomeController-Create.html"
  },"35": {
    "doc": "13. Prometheus",
    "title": "13. Prometheus",
    "content": "docker-compose.yml . version: '3' services: prometheus: image: prom/prometheus container_name: prometheus volumes: - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml - prometheus_data:/prometheus command: - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' - '--web.console.libraries=/usr/share/prometheus/console_libraries' - '--web.console.templates=/usr/share/prometheus/consoles' ports: - \"${PROMETHEUS_PORT:-9090}:9090\" grafana: image: grafana/grafana container_name: grafana user: \"104\" depends_on: - prometheus ports: - \"${GRAFANA_PORT:-3000}:3000\" volumes: - grafana_storage:/var/lib/grafana - ./grafana/provisioning/:/etc/grafana/provisioning/ env_file: - ./grafana/config.monitoring restart: always node-exporter: image: prom/node-exporter container_name: node-exporter volumes: - /proc:/host/proc:ro - /sys:/host/sys:ro command: - '--path.procfs=/host/proc' - '--path.sysfs=/host/sys' - --collector.filesystem.ignored-mount-points - \"^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)\" ports: - 9100:9100 restart: always cadvisor: image: google/cadvisor container_name: cadvisor volumes: - /var/run:/var/run:rw - /sys:/sys:ro - /var/lib/docker/:/var/lib/docker:ro ports: - \"${CADVISOR_PORT:-8080}:8080\" restart: always volumes: prometheus_data: {} grafana_storage: {} postgres_data: { driver_opts: o: \"size=100m\" } . Дашборд для Grafana . ()[grafana.com/grafana/dashboards/?search=.net] . Сид базы данных . INSERT INTO \"Users\" () . ",
    "url": "/tutorial_pages/AppOpenLoops/13.%20Prometheus.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/13.%20Prometheus.html"
  },"36": {
    "doc": "Github",
    "title": "Github",
    "content": " ",
    "url": "/leftmenu/14.%20Github.html",
    "relUrl": "/leftmenu/14.%20Github.html"
  },"37": {
    "doc": "14. HomeController-Edit",
    "title": "14. HomeController-Edit",
    "content": "./Mvc/ViewModels/EmployeeEditViewModel.cs . public class EmployeeEditViewModel : EmployeeCreateViewModel { public string? ExistingPhotoPath { get; set; } } ./Mvc/Controllers/HomeController.cs: Create . [HttpPost] public IActionResult Create([FromForm] EmployeeCreateViewModel model) { if (ModelState.IsValid) { string uniqueFileName = ProcessUploadedFile(model); Employee newEmployee = new Employee { Name = model.Name, Email = model.Email, Departament = model.Departament, PhotoPath = uniqueFileName }; _employeeRepository.Add(newEmployee); return RedirectToAction(\"details\", new { id = newEmployee.Id }); } return View(); } ./Mvc/Controllers/HomeController.cs: Get Edit . [HttpGet] public ViewResult Edit([FromRoute] int id) { Employee employee = _employeeRepository.GetEmployee(id); EmployeeEditViewModel employeeEditViewModel = new EmployeeEditViewModel { Id = employee.Id, Name = employee.Name, Email = employee.Email, Departament = employee.Departament, ExistingPhotoPath = employee.PhotoPath }; return View(employeeEditViewModel); } ./Mvc/Controllers/HomeController.cs: Post Edit . [HttpPost] public IActionResult Edit([FromForm] EmployeeEditViewModel model) { Employee employee = _employeeRepository.GetEmployee(model.Id); employee.Name = model.Name; employee.Email = model.Email; employee.Departament = model.Departament; if(model.Photo != null) { if(model.ExistingPhotoPath != null) { var filePath = Path.Combine(_hostingEnvironment.WebRootPath, \"images\", model.ExistingPhotoPath); System.IO.File.Delete(filePath); } employee.PhotoPath = ProcessUploadedFile(model); } _employeeRepository.Update(employee); return RedirectToAction(\"index\"); } ./Mvc/Controllers/HomeController.cs: ProcessUploadedFile . private string ProcessUploadedFile(EmployeeCreateViewModel model) { string uniqueFileName = null; if (model.Photo != null) { string uploadsFolder = Path.Combine(_hostingEnvironment.WebRootPath, \"images\"); uniqueFileName = Guid.NewGuid().ToString() + \"_\" + model.Photo.FileName; string filePath = Path.Combine(uploadsFolder, uniqueFileName); using(var fileStream =new FileStream(filePath, FileMode.Create)) { model.Photo.CopyTo(fileStream); } } return uniqueFileName; } ./Mvc/Views/Home/Edit.cshtml . @model EmployeeEditViewModel; @using System.IO; @{ ViewBag.Title = \"Edit Employee\"; string photoPath = System.IO.Path.Combine(\"/images/\",(Model.ExistingPhotoPath ?? \"noimage.jpg\")); } &lt;form enctype=\"multipart/form-data\" asp-controller=\"Home\" asp-action=\"Edit\" method=\"post\"&gt; &lt;input hidden asp-for=\"Id\" /&gt; &lt;input hidden asp-for=\"ExistingPhotoPath\" /&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Name\" class=\"form-label\"&gt;&lt;/label&gt; &lt;input asp-for=\"Name\" class=\"form-control\" /&gt; &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Email\" class=\"form-label\"&gt;&lt;/label&gt; &lt;input asp-for=\"Email\" class=\"form-control\" /&gt; &lt;span asp-validation-for=\"Email\" class=\"text-danger\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Departament\" class=\"form-label\"&gt;&lt;/label&gt; &lt;select asp-for=\"Departament\" asp-items=\"Html.GetEnumSelectList&lt;Dept&gt;()\" class=\"form-control\"&gt; &lt;option value=\"\"&gt;Please select departament&lt;/option&gt; &lt;/select&gt; &lt;span asp-validation-for=\"Departament\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Photo\" class=\"form-label\"&gt;&lt;/label&gt; &lt;div class=\"imput-group\"&gt; &lt;input asp-for=\"Photo\" class=\"form-control custom-file-input\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"mb-3\"&gt; &lt;img src=\"@photoPath\" class=\"imageThumbnail\" asp-append-version=\"true\"&gt; &lt;/div&gt; &lt;div asp-validation-summary=\"All\" class=\"text-danger\"&gt;&lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm-10\"&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Update&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; @section Scripts { } &lt;/form&gt; ./Mvc/Views/Home/Details.cshtml . @model HomeDetailsViewModel @{ ViewBag.Title = \"Employee Details\"; var photoPath = System.IO.Path.Combine(\"/images/\",(Model.Employee.PhotoPath ?? \"noimage.jpg\")); } @{ ViewBag.Title = \"Employee Details\"; } &lt;div class=\"row justify-content-center m-3\"&gt; &lt;div class=\"col-sm-8\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-header\"&gt; &lt;h1&gt;@Model.Employee.Name&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"card-body text-center\"&gt; &lt;img class=\"card-img-top\" src=\"@photoPath\" /&gt; &lt;h4&gt;Employee ID : @Model.Employee.Id&lt;/h4&gt; &lt;h4&gt;Email : @Model.Employee.Email&lt;/h4&gt; &lt;h4&gt;Departament : @Model.Employee.Departament&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"card-footer text-center\"&gt; &lt;a asp-controller=\"home\" asp-action=\"index\" class=\"btn btn-primary\"&gt;Back&lt;/a&gt; &lt;a asp-controller=\"home\" asp-action=\"edit\" asp-route-id=\"@Model.Employee.Id\" class=\"btn btn-primary m-1\"&gt;Edit&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ./Mvc/Views/Home/Index.cshtml . @model IEnumerable&lt;Employee&gt; @{ ViewBag.Title = \"Employee List\"; } &lt;div class=\"row row-cols-1 row-cols-md-3 g-4 mt-3\"&gt; @foreach (var employee in Model) { var photoPath = \"/images/\" + (employee.PhotoPath ?? \"noimage.jpg\"); &lt;div class=\"col\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-header\"&gt; &lt;h5 class=\"card-title\"&gt;@employee.Name&lt;/h5&gt; &lt;/div&gt; &lt;img class=\"card-img-top\" src=\"@photoPath\" asp-append-version=true /&gt; &lt;div class=\"card-footer text-center\"&gt; &lt;a asp-controller=\"home\" asp-action=\"details\" asp-route-id=\"@employee.Id\" class=\"btn btn-primary m-1\"&gt;View&lt;/a&gt; &lt;a asp-controller=\"home\" asp-action=\"edit\" asp-route-id=\"@employee.Id\" class=\"btn btn-primary m-1\"&gt;Edit&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; } &lt;/div&gt; . ",
    "url": "/tutorial_pages/AppEmployeeManagement/14.%20HomeController-Edit.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/14.%20HomeController-Edit.html"
  },"38": {
    "doc": "14. Конфигурация",
    "title": "14. Конфигурация",
    "content": "var connectionString = builder.Configuration.GetConnectionString(\"MyDbContext\"); var connectionString = builder.Configuration.GetValue&lt;string&gt;(\"ConnectionStrings:MyDbContext\"); var connectionString = builder.Configuration.GetSection(\"ConnectionStrings\"); var connectionString = builder.Configuration.GetSection(\"ConnectionStrings:MyDbContext\"); . User secret . dotnet user-secrets init -p ./API/ dotnet user-secrets -p ./API/ set ConnectionStrings:MyDbContext \"new test from secrets\" dotnet user-secrets list -p ./API/ . Docker . Ctrl+Shift+P Add Docker Files to Workspace . ",
    "url": "/tutorial_pages/AppOpenLoops/14.%20%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/14.%20%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F.html"
  },"39": {
    "doc": "15. 404",
    "title": "15. 404",
    "content": "./Mvc/Program.cs . using Microsoft.EntityFrameworkCore; var builder = WebApplication.CreateBuilder(args); builder.Services.AddDbContext&lt;AppDbContext&gt;(options =&gt; options.UseSqlServer( builder.Configuration.GetConnectionString(\"EmployeeDbConnection\") )); builder.Services.AddScoped&lt;IEmployeeRepository, SqlServerRepository&gt;(); builder.Services.AddControllersWithViews(); var app = builder.Build(); if(app.Environment.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else{ app.UseExceptionHandler(\"/Error\"); } app.UseStaticFiles(); app.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\" ); app.Run(); ./Mvc/Controllers/ErrorController.cs . using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Diagnostics; using Microsoft.AspNetCore.Mvc; public class ErrorController : Controller { [Route(\"Error/{statusCode}\")] public IActionResult HttpStatusCodeHandler(int statusCode) { var statusCodeResult = HttpContext.Features.Get&lt;IStatusCodeReExecuteFeature&gt;(); switch (statusCode) { case 404: ViewBag.ErrorMessage = \"Not found\"; _logger.LogWarning($\"40\"); break; } return View(\"NotFound\"); } [Route(\"Error\")] [AllowAnonymous] public IActionResult Error() { var exceptionDetails = HttpContext.Features.Get&lt;IExceptionHandlerPathFeature&gt;(); ViewBag.ExceptionPath = exceptionDetails.Path; ViewBag.ExceptionMessage = exceptionDetails.Error.Message; ViewBag.Stacktrace = exceptionDetails.Error.StackTrace; return View(\"Error\"); } } ./Mvc/Views/Shared/Error.cshtml . &lt;h3&gt;An occured while processing your request.&lt;/h3&gt; &lt;h5&gt;Please contact us.&lt;/h5&gt; &lt;hr&gt; &lt;div class=\"alert alert-danger\"&gt; &lt;h5&gt;Exception Path&lt;/h5&gt; &lt;hr&gt; &lt;p&gt;@ViewBag.ExceptionPath&lt;/p&gt; &lt;/div&gt; &lt;div class=\"alert alert-danger\"&gt; &lt;h5&gt;Exception Message&lt;/h5&gt; &lt;hr&gt; &lt;p&gt;@ViewBag.ExceptionMessage&lt;/p&gt; &lt;/div&gt; &lt;div class=\"alert alert-danger\"&gt; &lt;h5&gt;Exception Stack Trace&lt;/h5&gt; &lt;hr&gt; &lt;p&gt;@ViewBag.StackTrace&lt;/p&gt; &lt;/div&gt; . ",
    "url": "/tutorial_pages/AppEmployeeManagement/15.%20404.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/15.%20404.html"
  },"40": {
    "doc": "Github Actions",
    "title": "Github Actions",
    "content": " ",
    "url": "/leftmenu/15.%20Github%20Actions.html",
    "relUrl": "/leftmenu/15.%20Github%20Actions.html"
  },"41": {
    "doc": "16. Logging",
    "title": "16. Logging",
    "content": "dotnet add package NLog.Web.AspNetCore . ",
    "url": "/tutorial_pages/AppEmployeeManagement/16.%20Logging.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/16.%20Logging.html"
  },"42": {
    "doc": "2. Создать новый бранчхед здесь",
    "title": "2. Создать новый бранчхед здесь",
    "content": "Первая ветка master создается первым git commit после git init Дальше ветки создаются командой git branch или git checkout -b . Создать ветку git branch develop Создать на последнем коммите вершину develop . Создать ветку и сразу переключиться git checkout -b develop . ",
    "url": "/manual_pages/Git%20Branching/2.%20Create%20branch%20head%20here.html",
    "relUrl": "/manual_pages/Git%20Branching/2.%20Create%20branch%20head%20here.html"
  },"43": {
    "doc": "DemoAppCNC",
    "title": "DemoAppCNC",
    "content": "Как настроить дебаггер VSCode чтобы он работал с двумя проектами? Как смотреть какие файлы были изменены в коммите и что было изменено? Как использовать стэш перед checkout? Что такое with в `` Что такое paramName? Включить в vscode поля, начинающиеся с _. Починить форматирование Shift+F builder.HasKey Property в EF что делает? Поставить экстеншн C# XML Documentation. Видео 7 . Video 7. Юнит, Интеграционное, Github Actions . Github-дискуссии Art of Unit Testing . Что такое value object note? Open-close principle 2:56:02 Results . юнит-тесты готовы 1:47:00 юнит-тесты переделаны на results 3:05:00 . Video 8. Видео 8 1:15:00 Анемичные модели 1:36:00 Модификатор file, Паттерн Saga, struct в оперативной памяти 1:55:00 jsonrpc vs rest, еще про struct в оперативной памяти Управление памятью в .NET для профессионалов. Конрад Кокоса. refactoring.guru 2:55:00 Настройки терминала . Video 9. Подключаем БД . Видео 9 Отношения в БД 1:1 , 1:ко многим, много ко многим 1:45:00 Есть плагин vscode: postgres 2:10:00 Entity Framework . Video 10. (index=11) Оптимизация запросов . 0:17:00 - LINQ to Entities, как запросы конвертируются в Postgres SQL-код Eager/Explicit/Lazy loading 1:15:00 Docker Volume для Postgres . Video 11 (index=12) . 00:00:00 Codespaces 00:22:00 Git: Коммит всех изменений, сделанных в двух предыдущих видео 00:57:30 Git: Работа в Vscode c гитом 1:18:00 Где держать базу данных при разработке, сиды 1:30:00 Проверка домашек TodoList 1:35:00 RPC vs Rest Организация контроллера 1:56:00 dotnet new editorconfig, статический анализ 2:01:00 stylecop 2:31:00 Схема проекта 2:58:00 Noda time - альтернативный DateTime для .NET . Video 12 (index=13) Prometheus/Grafana . 1:40:00 Дашборды Grafana maheshmahadevan docker-compose 1:59:00 Сид базы данных 2:03:00 Ограничение на размер тома postgres-data в docker-compose 3:05:00 Работа в C# в Postgresql через Connection . Video 13 (index=15) . 0:10:00 XML-комменты для swagger sharplab.io Вместо рихтера - управление памятью .net для профессионалов 1:02:00 Не надо писать свои делегаты - есть Action, Func, Predicate 1:20:00 Почему sealed ускоряет работу программы 2:10:00 Как работают implicit usings 2:35:00 Переделывает Интеграционные тесты, Autofixture . Video 14 (index=15) . 0:00:00 Домашка и Linq to Entities EF 1:30:00 Еще вопросы по Entity framework: миграции 2:40:00 Attachment в openloop в AutomatiBroccoli . Video 15 . 0:36:00 Домашка человека со старым .NET Core. Пример Program.cs .editorconfig для того чтобы в проекте везде была UTF 1:21:00 пример appsettings.json 1:50:00 Почему ModelState.IsValid не работает 2:00:00 ValueTask . Video 16 еще Prometheus/Grafana (Продолжение Video 12) . 00:27:00 Нагрузочный тест 2:45:00 Задачи для собеся Kodekata и Leetcode(?) . Video 18 . 00:55:00 Пример Program.cs. Что такое AddApiVersioning? Dabase.EnsureCreated() не использовать - при любой ошибке приложение падает. 2:22:00 Boxing/Unboxing Нужно ли делать весь CRUD-Repository, Generic-Repository List vs Массив 2:28:00 FirstOrDefault 2:40:00 ExceptionFilter . Video 19 Кодина automatic-broccoli 8 января . Добавление attachment в automatic-broccoli dotnet fake . Video 20 Собес . http,https GET, POST, PUT, header/ body/ query parameters API, Endpoint . 54:00:00 Дебаггер для контроллеров ASP.NET Core Что такое Identity Server? Identity vs Identity Server? 1:20:00 - 1::00 Многопоточность: Tannenbaum: Operating systems Многопоточность, асинхронность, параллелизм 1:53:00 Alogorithms &amp; Data Structures 2:09:00 Profiler есть в Visual Studio. В Vscode консольный тул dotnet. roadmap.sh/aspnet-core/ . Video 21 builder.Configuration, user secrets | Домашка #39 . Github-дискуссии Сгенерировать ассеты для API Поставить брейкпоинт на builder.Services.AddControllers() Смотреть Variables 00:37:00 Как устроен Configuration Manager 1:37:00 Добавить Dockerfile к проекту . Video 22 Проверка домашки . 00:25:00 Angular commits enum должен наследовать от byte? 1:18:00 Генерация regex . Video 23 Воркшоп Телеграм-бот CleannetCode_bot . 00:59:00 Лонг пуллинг - раз в день опрашивать репозиторий 1:21:00 Форк репозитория 2:24:00 Achievment Handler . Video 28 . 2:47:00 Время жизни объектов .NET 3:30:00 One pager for pull request . Video 31 . Создать для конфига terraform папку в корне солюшена . mkdir terraform cd ./terraform touch config.tf terraform init . 1:40 2:08:00 Сборка docker-image для Terraform 2:52:00 Rancher 3:37:00 Сборка docker контейнера с проектом и паблиш в dockerhub . Video 32 . 00:52:00 dotnet publsih - self contained. Сбилдить для машины где нет .net 1:40:00 Serilog 1:50:00 Github actions для Terraform . Video 33 . 1:30:00 Схема Clean Architecture с пояснениями для .NET-проекта 2:10:00 Ревью appsettings.json 2:20:00 Ревью Program.cs . ",
    "url": "/leftmenu/2.%20DemoAppCNC.html",
    "relUrl": "/leftmenu/2.%20DemoAppCNC.html"
  },"44": {
    "doc": "2. Docker Advit",
    "title": "Docker",
    "content": "sudo systemctl status docker docker -v . ",
    "url": "/manual_pages/Docker/grand_children/2.%20DockerAdvit.html#docker",
    "relUrl": "/manual_pages/Docker/grand_children/2.%20DockerAdvit.html#docker"
  },"45": {
    "doc": "2. Docker Advit",
    "title": "Команды",
    "content": "docker run hello-world скачает имидж hello-world и запустит . docker ps показать живые контейнеры docker ps -a показать и живые и отключенные контейнеры . docker images показать все имиджи . docker search nginx найти на докерхабе имидж tomcat . docker pull nginx скачать но не запускать. docker run -d -p 1234:80 nginx запустить (скачать если не скачан) и отключиться d - дисконнект docker run -it -p 1234:80 nginx запустить интерактивно -p 1234:8080 Чтобы обратиться к порту 8080 контейнера докер, надо обратиться к порту 1234 машины. docker stop e2e4 остановить docker rm e2e4 грохнуть контейнер docker rmi nginx удалить имидж (контейнеры должны быть остановлены) . docker build -t myimage:v1 . создать имидж в текущей директории . docker tag myimage:v1 myimage:v2 переименовать тег . docker exec -it e2e4 /bin/bash залогиниться в уже запущенный контейнер и запустить bash . Dockerfile (docker build) . docker build -t testimage:v1 . сделать имидж из Dockerfile в текущей папке docker run -d -p 1377:80 testimage:v1 запустить 1377 внаружи - 80 внутри . nano ~/mydocker/Dockerfile . FROM ubuntu:20.04 RUN apt-get -y update RUN apt-get -y install apache2 RUN echo `Hello World from Docker! &gt; /var/www/html/index.html` CMD [\"/usr/sbin/apache2ctl\", \"-DFOREGROUND\"] EXPOSE 80 . Установка Docker Engine на Ubuntu . sudo apt-get update sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release sudo apt install apt-transport-https sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null sudo apt update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin . sudo usermod -aG docker $USER Добавить права текущему юзеру . ",
    "url": "/manual_pages/Docker/grand_children/2.%20DockerAdvit.html#%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B",
    "relUrl": "/manual_pages/Docker/grand_children/2.%20DockerAdvit.html#команды"
  },"46": {
    "doc": "2. Docker Advit",
    "title": "2. Docker Advit",
    "content": " ",
    "url": "/manual_pages/Docker/grand_children/2.%20DockerAdvit.html",
    "relUrl": "/manual_pages/Docker/grand_children/2.%20DockerAdvit.html"
  },"47": {
    "doc": "2. Git рабочий цикл",
    "title": "2. Git рабочий цикл",
    "content": "Начало работы с репозиторием . git status . git log --pretty=format:'%C(yellow)%h %C(dim green)%ad %C(reset)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' . git log origin/master . git pull . Выбор ветки . git branch Проверить ветку git checkout -b task1 Переключиться или . git branch task1 git checkout task1 . Коммит . git add * git status git commit -m \"Added file and updated\" git push --set-upstream origin task1 . В веб-интерфейсе выбрать принять push, создать pull request . В веб-интрефейсе смерджить пулл-реквест . Удалить ветку . git checkout master git branch -d task1 git push origin --delete task1 git checkout -b task1 . ",
    "url": "/tutorial_pages/AppEmployeeManagement/2.%20Git.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/2.%20Git.html"
  },"48": {
    "doc": "2. Git рабочий цикл",
    "title": "2. Git рабочий цикл",
    "content": "Начало работы с репозиторием . git status . git log --pretty=format:'%C(yellow)%h %C(dim green)%ad %C(reset)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' . git log origin/master . git pull . Выбор ветки . git branch Проверить ветку git checkout -b task1 Переключиться или . git branch task1 git checkout task1 . Коммит . git add * git status git commit -m \"Added file and updated\" git push --set-upstream origin task1 . В веб-интерфейсе выбрать принять push, создать pull request . В веб-интрефейсе смерджить пулл-реквест . Удалить ветку . git checkout master git branch -d task1 git push origin --delete task1 git checkout -b task1 . ",
    "url": "/tutorial_pages/AppOpenLoops/2.%20Git.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/2.%20Git.html"
  },"49": {
    "doc": "2. Просмотреть состояние файлов в коммите",
    "title": "2. Просмотреть состояние файлов в коммите",
    "content": "Просмотр рабочей директории git ls-files Делает то же что и ls, но позволяет фильтровать git ls-files – :!:*.md Показать все файлы без .md . Показать состояние файла в коммите git show develop:index.html показать версию index.html из бранчхеда develop git show :index.html Показать состояние index.html в индексе текущего коммита git show :\"текст\" Найти коммит по тексту “текст” коммита git show xxxx Показать коммит xxxx должно быть минимум четыре цифры . Показать состояние файла в индексе git show :index.html . Показать изменения из коммита xxxx git show Показать изменения, сделанные коммитом из HEAD git show xxxx Показывать изменения, сделанные коммитом xxxx. git show --pretty=fuller git show HEAD~ Показать все изменения сделанные родителем коммита HEAD То же что HEAD~1 то же что @~1 . Показать изменения в указанных файлах из коммита xxxx git show @~2 -- index.html Показать изменения в файле index.html в прародителе HEAD если были git show @~2:index.html Показать состояние index.html в прародителе HEAD . Список файлов измененных коммитом how-do-i-list-all-the-files-in-a-commit . Вся история изменений одного файла view-the-change-history-of-a-file-using-git-versioning show-history-of-a-file . ",
    "url": "/manual_pages/Git/2.%20View%20commit%20contents.html",
    "relUrl": "/manual_pages/Git/2.%20View%20commit%20contents.html"
  },"50": {
    "doc": "10. Настроить Git в Windows",
    "title": "Конфигурация Git",
    "content": "Задать имя и почту в репозитории локально (в файле .git/config) . git config user.name \"Name Surname\" git config user.email mail@example.com cat .git/config Вывест конфиг текущей папки (через cat) git config --list Вывести конфиг репозитория текущей папки (через git) Удалить из репозитория текущей папки имя и почту: git config --unset user.name git config --unset user.email git config --remove-section user . Задать имя и почту глобально . git config --global user.name \"...\" git config --global user.email \"...\" git config --system core.autocrlf true Найстроить лайн-брейки на уровне системы cat ~/.gitconfig Вывести глобальный конфиг (через cat) git config --list --global Вывести глобальный конфиг (через git) git config --global -e Открыть конфиг в редакторе по умолчанию . git config --global core.editor /Applications/Sublime\\ Текстовый редактор по умолчанию Примеры для разных редакторов git config --global core.editor \"code --wait\" VsCode . Каскад от более к менее приоритетному: . --local ↓ --global ↓ --system . Алиасы git . git config --global alias.c 'config --global' git c вместо git config --global . ",
    "url": "/manual_pages/Git%20Branching/20.%20Configuration.html#%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F-git",
    "relUrl": "/manual_pages/Git%20Branching/20.%20Configuration.html#конфигурация-git"
  },"51": {
    "doc": "10. Настроить Git в Windows",
    "title": "Git Help",
    "content": "git config -h помощь git help config помощь по git config . ",
    "url": "/manual_pages/Git%20Branching/20.%20Configuration.html#git-help",
    "relUrl": "/manual_pages/Git%20Branching/20.%20Configuration.html#git-help"
  },"52": {
    "doc": "10. Настроить Git в Windows",
    "title": "10. Настроить Git в Windows",
    "content": " ",
    "url": "/manual_pages/Git%20Branching/20.%20Configuration.html",
    "relUrl": "/manual_pages/Git%20Branching/20.%20Configuration.html"
  },"53": {
    "doc": "20. Docker Compose",
    "title": "Docker Compose",
    "content": "nginx.conf docker-compose.yml . До запуска docker compose up проверить чтобы ничего не было запущено . docker compose up --force-recreate -d . запустить docker compose с обновлением имиджей (–force-recreate) и в фоне (–detached) . docker compose stop . остановить docker compose когда он в состоянии detached . docker ps -a Список контейнеров docker image prune Удалить старые имиджи docker exec backend /bin/bash . nginx.conf . worker_processes 4; events { worker_connections 1024; } http { server { listen 80; location /demoapp { proxy_pass http://backend:80; } } } . docker-compose.yml . version: '3.4' services: proxy: image: nginx:latest container_name: reverse_proxy_demo depends_on: - backend volumes: - ./nginx.conf:/etc/nginx/nginx.conf ports: - 80:80 backend: environment: - ASPNETCORE_ENVIRONMENT: \"Development\" image: towk/demoapp:latest ports: - 5032:80 . ",
    "url": "/tutorial_pages/AppEmployeeManagement/20.%20Docker%20Compose.html#docker-compose",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/20.%20Docker%20Compose.html#docker-compose"
  },"54": {
    "doc": "20. Docker Compose",
    "title": "20. Docker Compose",
    "content": "Пакуем приложения ASP.NET Core с помощью Docker . ",
    "url": "/tutorial_pages/AppEmployeeManagement/20.%20Docker%20Compose.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/20.%20Docker%20Compose.html"
  },"55": {
    "doc": "201. Установка Docker на Ubuntu",
    "title": "201. Установка Docker на Ubuntu",
    "content": "Установка Docker на Ubuntu . ",
    "url": "/manual_pages/Docker/201.%20DockerOnUbuntu.html",
    "relUrl": "/manual_pages/Docker/201.%20DockerOnUbuntu.html"
  },"56": {
    "doc": "201. ToDoList",
    "title": "201. ToDoList",
    "content": "GitHub . | Repository name: cautious-sniffle | Add a README file | Add .gitignore: VisualStudio Create Repository | . VS Code . Source Control: Clone Repository . Команды dotnet . dotnet -h помощь dotnet console -h помощь dotnet build -h dotnet new list список темплейтов dotnet new console -o TodoList -n MyNewTodoList Создать в папке TodoList проект с именем MyNewTodoList . Солюшен . dotnet new classlib -o TodoList.Models dotnet new console -o TodoList cd ./TodoList/ dotnet add reference ../TodoList.Models cd .. dotnet new webapi -o ./TodoList.API cd ./TodoList.API/ dotnet add reference ../TodoList.Models cd .. dotnet new sln -n TodoList dotnet sln add ./TodoList/ dotnet sln add ./TodoList.Models/ dotnet sln add ./TodoList.API/ dotnet build . Run adn Debug . Создать build and debug ассеты Generate C# Assets for Build and Debug: TodoList . Для TodoList.Api открыть папку TodoList.Api как отдельный workspace, сгенерить конфиг там и скопировать в корневой конфиг. ",
    "url": "/tutorial_pages/AppOpenLoops/201.%20ToDoList.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/201.%20ToDoList.html"
  },"57": {
    "doc": "3. Создать новый бранчхед на другом коммите",
    "title": "3. Создать новый бранчхед на другом коммите",
    "content": "git branch develop HEAD@{6} создать вершину develop на шестом положении HEAD из рефлога git branch --force develop xxxx Создать или подвинуть если уже есть вершину develop на коммит xxxx. ",
    "url": "/manual_pages/Git%20Branching/3.%20Create%20branch%20head%20elsewhere.html",
    "relUrl": "/manual_pages/Git%20Branching/3.%20Create%20branch%20head%20elsewhere.html"
  },"58": {
    "doc": "3. Сравнить",
    "title": "3. Сравнить",
    "content": "Что изменилось? От ласт-коммита к WT git diff HEAD Как git status, только для содержимого файлов git diff @ git diff -- index.html Сравнить index.html из WT с последним коммитом . Что изменилось? От коммита xxxx к WT git diff xxxx Сравнить WT с коммитом xxxx . Сравнить два коммита git diff xxxx yyyy Дифф xxxx с yyyy git diff master..feature То же что и пробел. Дифф между коммитами, на которых стоят бранчхеды. git diff master...feature Дифф feature с последним общим коммитом веток . Сравнить staging с указанным коммитом git diff --cached Сравнить staging с HEAD git diff не показывает untracked файлы . Что изменилось WT -&gt; Staging Git diff \\[\\-\\- index.md\\] . Git diff &lt;один коммит&gt; . WT vs Коммит . Git Diff --name-only master feature . ",
    "url": "/manual_pages/Git/3.%20Diff.html",
    "relUrl": "/manual_pages/Git/3.%20Diff.html"
  },"59": {
    "doc": "3. Docker Nana",
    "title": "Конфигурация yaml-файла Docker Compose для установки Mongo+Mongo Express",
    "content": "version:'3' services: mongodb: image: mongo ports: - 27017:27017 environment: - ME_INITDB_ROOT_USERNAME=admin - ME_INITDB_ROOT_PASSWORD=password mongodb-express: image: mongo-express ports: - 8080:8081 environment: - ME_CONFIG_MONGODB_ADMINUSERNAME=admin - ME_CONFIG_MONGODB_ADMINPASSWORD=password - ME_CONFIG_MONGODB_SERVER=mongodb . Запуск конейнеров из docker compose (с автоматическим созданием docker-network) . Выполнить в docker-compose файл mongo.yaml . docker-compose -f mongo.yaml up . -f выбрать файл up запустить все контейнеры . Остановить контейнеры docker compose и удалить docker network . docker-compose -f mongo.yaml down . Dockerfile Приложения на Node.js . FROM node:13-alpine ENV MONGO_DB_USERNAME=admin MONGO_DB_PWD=password RUN mkdir -p /home/app COPY ./app /home/app CMD [\"node\", \"home/app/server.js\"] . Билд докерфайла вместе с запуском . docker build -t my-app:1.0 . \\ docker run my-app:1.0 docker exec -it e4e5 /bin/sh ls /home/app . ",
    "url": "/manual_pages/Docker/grand_children/3.%20DockerNana.html#%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F-yaml-%D1%84%D0%B0%D0%B9%D0%BB%D0%B0-docker-compose-%D0%B4%D0%BB%D1%8F-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B8-mongomongo-express",
    "relUrl": "/manual_pages/Docker/grand_children/3.%20DockerNana.html#конфигурация-yaml-файла-docker-compose-для-установки-mongomongo-express"
  },"60": {
    "doc": "3. Docker Nana",
    "title": "AWS",
    "content": "Ссылка Пуши имиджа my-app . docker build # Тэг нужен для того, чтобы docker push заливал имидж не на dockerhub, а в AWS docker tag docker push . version:'3' services: mongodb: image: mongo ports: - 27017:27017 environment: - ME_INITDB_ROOT_USERNAME=admin - ME_INITDB_ROOT_PASSWORD=password mongodb-express: image: mongo-express ports: - 8080:8081 environment: - ME_CONFIG_MONGODB_ADMINUSERNAME=admin - ME_CONFIG_MONGODB_ADMINPASSWORD=password - ME_CONFIG_MONGODB_SERVER=mongodb . ",
    "url": "/manual_pages/Docker/grand_children/3.%20DockerNana.html#aws",
    "relUrl": "/manual_pages/Docker/grand_children/3.%20DockerNana.html#aws"
  },"61": {
    "doc": "3. Docker Nana",
    "title": "Docker Volumes в Compose",
    "content": "Том mongo-data . version: '3' services: mongodb: image: mongo ports: - 27017:27017 environment: - ME_INITDB_ROOT_USERNAME=admin - ME_INITDB_ROOT_PASSWORD=password volumes: - mongo-data:/data/db mongo-express: image: mongo-express ports: - 8080:8081 environment: - ME_CONFIG_MONGODB_ADMINUSERNAME=admin - ME_CONFIG_MONGODB_ADMINPASSWORD=password - ME_CONFIG_MONGODB_SERVER=mongodb #Здесь монтируется том mongo-data volumes: mongo-data: driver: local . ",
    "url": "/manual_pages/Docker/grand_children/3.%20DockerNana.html#docker-volumes-%D0%B2-compose",
    "relUrl": "/manual_pages/Docker/grand_children/3.%20DockerNana.html#docker-volumes-в-compose"
  },"62": {
    "doc": "3. Docker Nana",
    "title": "3. Docker Nana",
    "content": "Посмотреть логи, которые произвел контейнер . docker logs e4e5 . docker pull mongo docker pull mongo-express . Docker network. Базовые команды . docker network ls docker network create mongo-network . Загрузка-запуск контейнера Mongo . Стандартный порт монги: 27017 . docker run -p 27017:27017 mongo . Запускаем монгу и задаем переменные окружения через -e . docker run -d \\ -p 27017:27017 \\ -e MONGO_INITDB_ROOT_USERNAME=admin \\ -e MONGO_INITDB_ROOT_PASSWORD=password \\ --name mongodb \\ --net mongo-network \\ mongo # Проверить что всё запустилось docker logs e4e5 docker logs e4e5 | tail . Загрузка-запуск контейнера Mongo Express . Mongo Express - веб-фронтенд для монги как phpmyadmin . docker run -d \\ -p 8081:8081 \\ -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \\ -e ME_CONFIG_MONGODB_ADMINPASSWORD=password \\ --net mongo-network \\ --name mongo-express \\ -e ME_CONFIG_MONGODB_SERVER=mongodb \\ mongo-express # Проверить что всё запустилось docker logs e4e5 docker logs e4e5 | tail . ",
    "url": "/manual_pages/Docker/grand_children/3.%20DockerNana.html",
    "relUrl": "/manual_pages/Docker/grand_children/3.%20DockerNana.html"
  },"63": {
    "doc": "3. Солюшен",
    "title": "3. Солюшен",
    "content": "VS Code . Ctrl+Shift+P Generate Assets for Build and Debug . CLI: Создание солюшена и проекта . dotnet new sln --name DemoAppMvc dotnet new web -o Mvc dotnet sln add ./Mvc mkdir wwwroot dotnet build . Добавить в .gitignore изображения и библиотеки libman . Mvc/wwwroot/lib/ Mvc/wwwroot/images/ . Запуск проекта . dotnet build cd ./Mvc dotnet run . ",
    "url": "/tutorial_pages/AppEmployeeManagement/3.%20%D0%A1%D0%BE%D0%BB%D1%8E%D1%88%D0%B5%D0%BD.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/3.%20%D0%A1%D0%BE%D0%BB%D1%8E%D1%88%D0%B5%D0%BD.html"
  },"64": {
    "doc": "4. Docker Minin",
    "title": "4. Docker Minin",
    "content": "Видео docker version посмотреть версию docker ps --help хелп по ps docker image --help . docker build . Создать имидж и докерфайла в рабочей директории docker run e2e4 Запустить имидж (контейнер запускается другой командой) . docker pull node Скачать имидж node.js . docker run -it node запустить в интерактивном режиме exit выйти из контейнера . docker container prune удалить все остановленные контейнеры . Dockerfile . # Докер смотрит, есть ли имидж node локально, качает FROM node # То же что и cd /app WORKDIR /app # Первая точка - директория, где лежит сам Dockerfile # Вторая точка - куда в образе поместить относительно рабочей директории COPY . #Выполнить команду npm install RUN npm install #Открыть порт при запуске. Необязательно, но best practice. EXPOSE 3000 #Запустить приложение app.js в ноде #RUN используется для сборки образа #CMD для запуска образа CMD [\"node\", \"app.js\"] . docker stop e2e4 Остановить контейнер docker run работать на такой контейнер не будет docker start e2e4 запустить установленный контейнер . Изменения в dockerfile . FROM node WORKDIR /app # COPY package.json /app COPY . RUN npm install EXPOSE 3000 CMD [\"node\", \"app.js\"] . docker attach e2e4 подключиться к контейнеру . docker logs e2e4 что выводилось в контейнере docker logs containername что выводилось - по имени контейнера . docker run -d -p 3000:3000 --name containername --rm e2e4 --rm Удалить контейнер если выполнен docker stop .Dockerignore . Какие файлы и папки из директории Dockerfile не нужны в образе .git .idea Dockerfile . docker image instpect myimage Показать из каких слоев сделан имидж . ENV-переменные в Dockerfilew . FROM node WORKDIR /app COPY package.json /app COPY . RUN npm install # Номер порта выносится в переменную ENV PORT 4200 EXPOSE $PORT CMD [\"node\", \"app.js\"] . Задание env переменной на запуске . -e параметр docker run -d -p 3000:80 -e PORT=80 --rm --name logsapp logsapp:env . Все ENV-переменные в файле . Создается файл config/.env . PORT=4200 . docker run -d -p 3000:80 -env-file ./config/.env --rm --name logsapp logsapp:env . Docker Volumes . Общая папка для нескольких контейнеров docker run -d -p 3000:3000 -v vol1:/app/data -v vol2:\"/Users/akupc/WebStormPojrects/app:/app\" -v /app/node_modules/ --rm --name appcontainer appimage:apptag docker volume --help -v myvolume:/app/data Имя волюма logs, расположение /app/data docker volume ls посмотреть список волюмов docker volume inspect myvolume . ENV-переменные в Dockerfilew . FROM node WORKDIR /app COPY package.json /app COPY . RUN npm install ENV PORT 4200 VOLUME [ \"/app/data\" ] EXPOSE $PORT CMD [ \"node\", \"app.js\" ] . Создаются автоматически параметром -v Создать волюм из консоли docker volume create myvolume . ",
    "url": "/manual_pages/Docker/grand_children/4.%20DockerMinin.html",
    "relUrl": "/manual_pages/Docker/grand_children/4.%20DockerMinin.html"
  },"65": {
    "doc": "4. Github Actions",
    "title": "4. Github Actions",
    "content": "Стандартный workflow для проекта .NET . На github.com в репозитории в разделе Actions найти .NET Исправить dotnet-version на 7.0.x Configure &gt; Start Commit git pull . Дополнительно: Деплой по ssh . - name: Deploy uses: appleboy/ssh-action@master with: host: username: key: port: 22 script: | . Дополнительно: Деплой в докерхаб . Настроить Secrets в репозитории на github.com DOCKER_USERNAME DOCKER_PASSWORD . - name: Docker build-publish uses: mr-smithers-excellent/docker-build-push@v5.9 with: image: towk/demoapp tags: latest registry: docker.io username: $ password: $ .dockerignore .dockerignore **/.classpath **/.dockerignore **/.env **/.git **/.gitignore **/.project **/.settings **/.toolstarget **/.vs **/.vscode **/*.*proj.user **/*.dbmdl **/*.jfm **/azds.yaml **/bin **/charts **/docker-compose* **/Dockerfile* **/node_modules **/npm-debug.log **/obj **/secrets.dev.yaml **/values.dev.yaml LICENSE README.md . docker compose . Правый клик на проекте&gt; Add &gt; Container Orchestrations support&gt; Docker Compose . ",
    "url": "/tutorial_pages/AppEmployeeManagement/4.%20Github%20Actions.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/4.%20Github%20Actions.html"
  },"66": {
    "doc": "4. Подвинуть бранчхед",
    "title": "4. Подвинуть бранчхед",
    "content": "Подвинуть бранчхед на котором нет HEAD git branch -f master xxxx переместить бранчхед master на коммит xxxx или создать если её не существует. HEAD не должа стоять на этом бранчхеде. git branch -f develop master переместить бранчхед develop на тот же коммит что и master. Подвинуть бранчхед на котором HEAD git checkout -B hotfix xxxx подвинуть master вместе с HEAD если master существует. Если master не существует - создать и подвинуть на него HEAD. Заменяет git branch -f hotfix xxxx, git checkout hotfix . Восстановить положение бранчхеда из рефлога git branch develop HEAD@{'2017-09-12 22:49:07 +0200'} восстановить вершину develop на состояние HEAD из даты . ",
    "url": "/manual_pages/Git%20Branching/4.%20Move%20branch%20head.html",
    "relUrl": "/manual_pages/Git%20Branching/4.%20Move%20branch%20head.html"
  },"67": {
    "doc": "4. Solution",
    "title": "4. Solution",
    "content": "git clone ... cd ./DemoAppRT dotnet new sln -n DemoAppRT dotnet new classlib -o DataAccess dotnet new console -o CLI dotnet new webapi -o API dotnet sln add ./DataAccess/ dotnet sln add ./CLI/ dotnet sln add ./API/ cd ./CLI/ dotnet add reference ../DataAccess cd .. cd ./API/ dotnet add reference ../DataAccess cd .. ",
    "url": "/tutorial_pages/AppOpenLoops/4.%20Solution.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/4.%20Solution.html"
  },"68": {
    "doc": "4. Откатить WT до коммита",
    "title": "4. Откатить WT до коммита",
    "content": "Откатить всю WT и Staging до ласт-коммита. Всё несохраненное будет удалено. git checkout -f Отменить все изменения WT, отменить весь текущий коммит. untracked не трогает. git checkout -f HEAD То же самое. git checkout -- index.html Откатить отдельный файл в WT до коммита xxxx. Добавить новое состояние в Staging. git checkout xxxx -- index.html Откатить index.html в WT до xxxx + Добавить новую версию в индекс. То же что git checkout xxxx index.html . git checkout @~~~~ -- Program.cs //Откатить Program.cs на 4 коммита назад git checkout @~4 . Откатить отдельный файл в WT до коммита xxxx. Не добавлять новое состояние в Staging. git checkout xxxx -- index.html git checkout reset -- index.html . Откатить отдельный файл в WT до состояние в Index(Staging) git checkout index.html . ",
    "url": "/manual_pages/Git/4.%20WT%20Update.html",
    "relUrl": "/manual_pages/Git/4.%20WT%20Update.html"
  },"69": {
    "doc": "5. Добавить в Staging",
    "title": "5. Добавить в Staging",
    "content": "Добавить добавление файла в Staging git add . Добавить все untracked файлы в текущий коммит git add -A То же, но для тех ОС, где нет оператора точки git add index.md Добавить index.md в текущий коммит . git add src добавить папку src. Должна быть непустой. touch src/.gitkeep создать файл в пустой папке . Добавить изменения отдельных строчек в файле в Staging git add -p index.html index.md index.php git будет спрашивать что делать с каждым измененным файлом . Добавить в Staging то, что находится под гитигнором git add -f -- .idea/project.iml добавит файл, даже если он в .gitignore . Добавить в Staging удаление файла. WT не трогать. git rm -r --cached index.md Удалить src только из индекса, без рабочей директории Используется что далее добавить в .gitignore. Добавить в Staging удаление файла + удалить его из WT git rm -r src Удалить и из рабочей директории из текущего коммита папку со всеми вложениями То же что rm -r src + git add src git rm -f index.md Удалить файл. Игнорировать предупреждение, что он modified. Добавить переименование в Staging. Переименовать в WT Переименовать файл и в рабочей директории и в индексе текущего коммита git mv index.html index.md Переименовать index.html в index.md . ",
    "url": "/manual_pages/Git/5.%20Add%20to%20Staging.html",
    "relUrl": "/manual_pages/Git/5.%20Add%20to%20Staging.html"
  },"70": {
    "doc": "5. DataAccess",
    "title": "5. DataAccess",
    "content": "DataAccess/OpenLoop.cs DataAccess/OpenLoopsRepository.cs public static Guid Add(OpenLoop newOpenLoop) public static OpenLoop[] Get() . DataAccess/Note.cs . public readonly record struct Note { public Note (string note) { if(string.IsNullOrWhiteSpace(note)) { throw new ArgumentException(\"Note cannot be null or whitespace\", paramName: nameof(note)); } Value = note; } public string Value { get;} public static implicit operator string(Note note) =&gt; note.Value; public static implicit operator Note(string value) =&gt; new(value); } . DataAccess/CreatedDate.cs . public readonly record struct CreatedDate { public CreatedDate(DateTimeOffset createdDate) { if(createdDate == default) { throw new ArgumentException($\"Invalid CreatedDate '{createdDate}'\", paramName: nameof(createdDate)); } } public DateTimeOffset Value { get;} public static implicit operator DateTimeOffset(CreatedDate createdDate) =&gt; createdDate.Value; public static implicit operator CreatedDate(DateTimeOffset value) =&gt; new(value); } . public record OpenLoop { public OpenLoop(Guid id, Note note, CreatedDate createdDate) { Id = id; Note = note; CreatedDate = createdDate; } public Guid Id { get; init; } public Note Note { get; init; } public CreatedDate CreatedDate { get; init; } } . DataAccess/OpenLoopsRepository.cs . using System.Text.Json; public static class OpenLoopsRepository { public const string DirectoryName = \"./openLoops/\"; public static string DataDirectory = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,DirectoryName); public static Guid Add(OpenLoop newOpenLoop) { Directory.CreateDirectory(Path.Combine(DataDirectory, DirectoryName)); var json = JsonSerializer.Serialize( newOpenLoop, new JsonSerializerOptions{WriteIndented = true}); var fileName = $\"{newOpenLoop.Id}.json\"; var filePath = Path.Combine(DataDirectory, DirectoryName, fileName); File.WriteAllText(filePath, json); return newOpenLoop.Id; } public static OpenLoop[] Get() { var files = Directory.GetFiles(DataDirectory); var openLoopsList = new List&lt;OpenLoop&gt;(); foreach(var file in files) { var json = File.ReadAllText(file); var openLoop = JsonSerializer.Deserialize&lt;OpenLoop&gt;(json); if(openLoop == null) { throw new Exception(\"OpenLoop cannot be deserialized\"); } openLoopsList.Add(openLoop); } return openLoopsList.ToArray(); } } . ",
    "url": "/tutorial_pages/AppOpenLoops/5.%20DataAccess.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/5.%20DataAccess.html"
  },"71": {
    "doc": "5. Удалить бранчхед",
    "title": "5. Удалить бранчхед",
    "content": "git branch -D feature удалить тупиковый бранчхед git branch -d feature удалить бранчхед в середине другой ветки Ц . ",
    "url": "/manual_pages/Git%20Branching/5.%20Delete%20branch%20head.html",
    "relUrl": "/manual_pages/Git%20Branching/5.%20Delete%20branch%20head.html"
  },"72": {
    "doc": "5. Program.cs",
    "title": "5. Program.cs",
    "content": "./Mvc/Program.cs . var builder = WebApplication.CreateBuilder(args); builder.Services.AddControllersWithViews(); var app = builder.Build(); app.UseStaticFiles(); app.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); app.Run(); . ",
    "url": "/tutorial_pages/AppEmployeeManagement/5.%20Program_cs.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/5.%20Program_cs.html"
  },"73": {
    "doc": "Dotnet",
    "title": "Dotnet",
    "content": " ",
    "url": "/leftmenu/502.%20Dotnet.html",
    "relUrl": "/leftmenu/502.%20Dotnet.html"
  },"74": {
    "doc": "VS Code",
    "title": "VS Code",
    "content": "Сделать git-bash терминалом по умолчанию: . Ctrl+Shift+P -&gt; Terminal: Select Default Profile Выбрать из списка . Настроить keep alive для git-bash в Windows . https://superuser.com/questions/699676/how-to-prevent-ssh-from-disconnecting-if-its-been-idle-for-a-while ssh {USERNAME}@{URL} -p 22 -o \"ServerAliveInterval 60\"{ENTER}{DELAY 1000}{PASSWORD}{ENTER} для keepass . ",
    "url": "/leftmenu/506.%20VSCode.html",
    "relUrl": "/leftmenu/506.%20VSCode.html"
  },"75": {
    "doc": "6. CLI",
    "title": "6. CLI",
    "content": "CLI/Operations/IOperation.cs) CLI/Operations/CreateNewNoteOperation.cs CLI/Operations/GetNotesOperation.cs CLI/Application.cs CLI/Program.cs . CLI/Operations/IOperation.cs . public interface IOperation { void Invoke(); } . CLI/Operations/CreateNewNoteOperation.cs . public class CreateNewNoteOperation : IOperation { public void Invoke() { Console.WriteLine(\"Что вас беспокоит сейчас?\"); string? note; do{ note = Console.ReadLine(); } while(string.IsNullOrWhiteSpace(note)); var openLoop = new OpenLoop( id: Guid.NewGuid(), note: note, DateTimeOffset.UtcNow); OpenLoopsRepository.Add(openLoop); } } . CLI/Operations/GetNotesOperation.cs . public class GetNotesOperation : IOperation { public void Invoke() { var openLoops = OpenLoopsRepository.Get(); var group = openLoops.GroupBy(x =&gt; new DateTime( x.CreatedDate.Value.Year, x.CreatedDate.Value.Month, x.CreatedDate.Value.Day)); foreach(var groupOfOpenLoops in group) { System.Console.WriteLine($\"Ваши заботы за: {groupOfOpenLoops.Key:dd.MM.yyyy}\"); foreach(var openLoop in groupOfOpenLoops.ToArray()) { Console.WriteLine(openLoop.Note); } } } } . CLI/Application.cs . namespace AutomaticBroccoli.CLI; public class Application { private readonly Dictionary&lt;string, IOperation&gt; _menu; public Application() { _menu = new Dictionary&lt;string, IOperation&gt; { {\"create\", new CreateNewNoteOperation{}}, {\"get\", new GetNotesOperation{}} }; } public void Run(CancellationToken token) { Console.Clear(); while(!token.IsCancellationRequested) { PrintMenu(); var operationName = Console.ReadLine() ?? string.Empty; if(token.IsCancellationRequested) { break; } if(!_menu.TryGetValue(operationName, out var operation) || operation is null) { Console.WriteLine($\"Команды '{operationName}' не существует\"); System.Console.WriteLine(\"Нажмите любую клавишу, чтобы продолжить\"); Console.ReadKey(true); Console.Clear(); continue; } operation.Invoke(); } } private void PrintMenu() { System.Console.WriteLine(\"Список доступных операций над заметками\"); foreach(var item in _menu) { System.Console.WriteLine($\" - {item.Key}\"); } System.Console.WriteLine(\"Введите Ctrl + C чтобы выйти из программы\"); } } . CLI/Program.cs . using System.Text; using AutomaticBroccoli.CLI; Console.OutputEncoding = Encoding.UTF8; Console.InputEncoding = Encoding.Unicode; var stoppingTokenSource = new CancellationTokenSource(); Console.CancelKeyPress += (sender, e) =&gt; stoppingTokenSource.Cancel(); var app = new Application(); app.Run(stoppingTokenSource.Token); . ",
    "url": "/tutorial_pages/AppOpenLoops/6.%20CLI.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/6.%20CLI.html"
  },"76": {
    "doc": "6. Подвинуть HEAD на другой бранчхед",
    "title": "6. Подвинуть HEAD на другой бранчхед",
    "content": "Подвинуть HEAD когда чистый git status Подвинуть HEAD когда git status не чистый, но состояния измененных файлав в ласт-коммите и новом коммите идентичны git checkout develop подвинуть HEAD на бранчхед develop . Подвинуть HEAD когда git status не чистый и файлы в ласт-коммите и новом коммите различаются git checkout --force develop Изменения WT и Staging будут выбросить. Вернуть HEAD на предыдущее значение git checkout @{-1},git checkout - . Сохранить в стэш изменения из WT git stash Сохраняет состояние WT. Использовать перед например git checkout. git stash pop Восстанавливает WT из стэша. ",
    "url": "/manual_pages/Git%20Branching/6.%20Move%20HEAD.html",
    "relUrl": "/manual_pages/Git%20Branching/6.%20Move%20HEAD.html"
  },"77": {
    "doc": "6. Изменить/Отменить Staging",
    "title": "6. Изменить/Отменить Staging",
    "content": "Удалить изменения из Staging. В WT всё остается как было. git reset HEAD -- . Убрать из Staging все добавленные изменения git reset HEAD -- .idea удалить из Staging изменения в .idea . Удалить изменения из Staging. WT тоже откатить до HEAD. git checkout -f Отменить все изменения WT, отменить весь Staging. untracked в WT не трогать. git checkout -f HEAD То же самое. git checkout --force master Обновить WT до состояния ласт-коммита master. Отменить весь Staging. Поставить HEAD на master. Удалить untracked git clean -d git clean -x git clean -f git clean -dxf . ",
    "url": "/manual_pages/Git/6.%20Staging%20Update.html",
    "relUrl": "/manual_pages/Git/6.%20Staging%20Update.html"
  },"78": {
    "doc": "6. Модели",
    "title": "6. Модели",
    "content": "./Mvc/Models/Dept.cs ./Mvc/Models/Employee.cs ./Mvc/Models/Dept.cs . public enum Dept : byte { None, HR, IT, Payroll } ./Mvc/Models/Employee.cs . using System.ComponentModel.DataAnnotations; public class Employee { public int Id { get; set; } public string Name { get; set; } public string Email { get; set; } public Dept? Departament { get; set; } public string? PhotoPath { get; set; } } . ",
    "url": "/tutorial_pages/AppEmployeeManagement/6.%20%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/6.%20%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8.html"
  },"79": {
    "doc": "7. API",
    "title": "7. API",
    "content": "API/Contracts/GetOpenLoopDto.cs API/Contracts/CreateOpenLoopRequest.cs API/Contracts/GetOpenLoopsResponse.cs API/Controllers/OpenLoopsController.cs API/Program.cs . API/Contracts/GetOpenLoopDto.cs . public class GetOpenLoopDto { public Guid Id { get; set; } public string Note { get; set; } public DateTimeOffset CreatedDate { get; set; } } . API/Contracts/CreateOpenLoopRequest.cs . public class CreateOpenLoopRequest { public string Note {get; set;} } . API/Contracts/GetOpenLoopsResponse.cs . public sealed class GetOpenLoopsResponse { public GetOpenLoopDto[] OpenLoops { get; set; } } . API/Controllers/OpenLoopsController.cs . using System.Net; using System.Net.Mime; using Microsoft.AspNetCore.Mvc; [ApiController] [Route(\"[controller]\")] [Produces(MediaTypeNames.Application.Json)] [Consumes(MediaTypeNames.Application.Json)] public class OpenLoopsController : ControllerBase { private readonly ILogger&lt;OpenLoopsController&gt; _logger; public OpenLoopsController(ILogger&lt;OpenLoopsController&gt; Logger) { _logger = Logger; } [HttpGet] [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(int))] public async Task&lt;IActionResult&gt; Get() { var openLoops = OpenLoopsRepository.Get(); var response = new GetOpenLoopsResponse { OpenLoops = openLoops.Select(x =&gt; new GetOpenLoopDto { Id = x.Id, Note = x.Note, CreatedDate = x.CreatedDate }).ToArray() }; return Ok(response); } [HttpPost] [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(int))] public async Task&lt;IActionResult&gt; Create([FromBody]CreateOpenLoopRequest request) { var openLoop = new OpenLoop( Guid.NewGuid(), request.Note, DateTimeOffset.UtcNow ); var openLoopId = OpenLoopsRepository.Add(openLoop); return Ok(openLoopId); } } . API/Program.cs . var builder = WebApplication.CreateBuilder(args); builder.Services.AddControllers(); builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); var app = builder.Build(); if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(); } app.UseHttpsRedirection(); app.UseAuthorization(); app.MapControllers(); app.Run(); public partial class Program{} . ",
    "url": "/tutorial_pages/AppOpenLoops/7.%20API.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/7.%20API.html"
  },"80": {
    "doc": "7. Mock Repository",
    "title": "7. Mock Repository",
    "content": "./Mvc/Models/IEmployeeRepository.cs ./Mvc/Models/MockEmployeeRepository.cs DI Мокапа Репозитория ./Mvc/Models/IEmployeeRepository.cs . public interface IEmployeeRepository { Employee GetEmployee(int Id); IEnumerable&lt;Employee&gt; GetAllEmployees(); Employee Add(Employee employee); Employee Update(Employee employeeChanges); Employee Delete(int id); } ./Mvc/Models/MockEmployeeRepository.cs . using System.Runtime.CompilerServices; public class MockEmployeeRepository : IEmployeeRepository { private List&lt;Employee&gt; _employeeList; public MockEmployeeRepository() { _employeeList = new List&lt;Employee&gt;() { new Employee(){Id = 1, Name = \"Mary\", Departament = Dept.HR, Email=\"mary@example.com\"}, new Employee(){Id = 2, Name = \"John\", Departament = Dept.IT, Email=\"john@example.com\"}, new Employee(){Id = 3, Name = \"Sam\", Departament = Dept.IT, Email=\"sam@example.com\"} }; } public Employee GetEmployee(int Id) { return _employeeList.FirstOrDefault&lt;Employee&gt;(e =&gt; e.Id == Id); } public IEnumerable&lt;Employee&gt; GetAllEmployees() { return _employeeList; } public Employee Add(Employee employee) { employee.Id = _employeeList.Max(e =&gt; e.Id) + 1; _employeeList.Add(employee); return employee; } public Employee Update(Employee employeeChanges) { Employee employee = _employeeList.FirstOrDefault(e =&gt; e.Id == employeeChanges.Id); if(employee != null) { employee.Name = employeeChanges.Name; employee.Email = employeeChanges.Email; employee.Departament = employeeChanges.Departament; } return employee; } public Employee Delete(int id) { Employee employee = _employeeList.FirstOrDefault(e =&gt; e.Id == id); if(employee != null) { _employeeList.Remove(employee); } return employee; } } . DI Repository Mockup . //var builder = WebApplication.CreateBuilder(args); builder.Services.AddSingleton&lt;IEmployeeRepository, MockEmployeeRepository&gt;(); //builder.Services.AddControllersWithViews(); . ",
    "url": "/tutorial_pages/AppEmployeeManagement/7.%20MockRepository.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/7.%20MockRepository.html"
  },"81": {
    "doc": "7. Удалить Tracked из Index",
    "title": "7. Удалить Tracked из Index",
    "content": " ",
    "url": "/manual_pages/Git/7.%20Tracked%20Update.html",
    "relUrl": "/manual_pages/Git/7.%20Tracked%20Update.html"
  },"82": {
    "doc": "8. Aсtions",
    "title": "8. Aсtions",
    "content": "Github Actions . На вкладке Actions создать по шаблону .NET Поменять версию .NET на 7. Выполняться будет не только при коммите в master но и в feature .github/workflows/dotnet.yml . # This workflow will build a .NET project # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net name: .NET on: push: branches: [ \"main\", \"feature/\" ] pull_request: branches: [ \"main\" ] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup .NET uses: actions/setup-dotnet@v3 with: dotnet-version: 7.0.x - name: Restore dependencies run: dotnet restore - name: Build run: dotnet build --no-restore - name: Test run: dotnet test --no-build --verbosity normal . ",
    "url": "/tutorial_pages/AppOpenLoops/8.%20Actions.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/8.%20Actions.html"
  },"83": {
    "doc": "8. Закоммитить",
    "title": "Git Commit -v",
    "content": " ",
    "url": "/manual_pages/Git/8.%20Do%20Commit.html#git-commit--v",
    "relUrl": "/manual_pages/Git/8.%20Do%20Commit.html#git-commit--v"
  },"84": {
    "doc": "8. Закоммитить",
    "title": "Git Reset &lt;pathspec&gt;",
    "content": "git reset HEAD сбросить весь индекс текущего коммита git reset index.html удалить из индекс то, что было сделано git add index.html . ",
    "url": "/manual_pages/Git/8.%20Do%20Commit.html#git-reset-pathspec",
    "relUrl": "/manual_pages/Git/8.%20Do%20Commit.html#git-reset-pathspec"
  },"85": {
    "doc": "8. Закоммитить",
    "title": "8. Закоммитить",
    "content": "Чисто коммит git commit Отправить в репозиторий текущий коммит git commit --author='John Smith' &lt;john@me.com&gt; --date='...' Задать автора, дату git commit -m \"Text\" Закоммитить с сообщением “Text” . Добавить в Staging и сразу закоммитить. Не работает для untracked git commit -m 'Text' index.md Добавить изменения файла index.md в индекс, закоммитить с текстом Text. Работает только для tracked файлов. git commit -a Добавить в индекс все tracked файлы git commit -a -m 'Text' то же, добавить в индес все modified и закоммитить. git commit -am 'Text' -||- . Алиас для полного Git Add . + Git Commit для tracked и untracked git config --global alias.commitall '!git add .;git commit' git config --global alias.commitall '!git add -A;git commit' Вызовы будут выглядеть: git commitall -m 'Text' Отмена одного последнего коммита git commit --amend branchhead и HEAD вернутся на один коммит назад, и граф будет продолжаться оттуда. Первоначальный коммит будет в анонимной ветке. Эквивалентно git reset --soft @~;git commit Так же используется для изменения описания последнего коммита, без изменений в файлах. ",
    "url": "/manual_pages/Git/8.%20Do%20Commit.html",
    "relUrl": "/manual_pages/Git/8.%20Do%20Commit.html"
  },"86": {
    "doc": "8. HomeController",
    "title": "8. HomeController",
    "content": "./Mvc/wwwroot/images/noimage.jpg ./Mvc/ViewModels/HomeDetailsViewModel.cs ./Mvc/Controllers/HomeController.cs ./Mvc/Views/Home/Create.cshtml ./Mvc/Views/Home/Details.cshtml ./Mvc/Views/Home/Index.cshtml ./Mvc/wwwroot/images/noimage.jpg . wwwroot/images/noimage.jpg ./Mvc/ViewModels/HomeDetailsViewModel.cs . public class HomeDetailsViewModel { public Employee Employee { get; set; } public string PageTitle { get; set; } } ./Mvc/Controllers/HomeController.cs . using Microsoft.AspNetCore.Mvc; public class HomeController : Controller { private readonly IEmployeeRepository _employeeRepository; public HomeController(IEmployeeRepository employeeRepository) { _employeeRepository = employeeRepository; } public ViewResult Index() { var model = _employeeRepository.GetAllEmployees(); return View(model); } public ViewResult Details(int? id) { HomeDetailsViewModel homeDetailsViewModel = new HomeDetailsViewModel() { Employee = _employeeRepository.GetEmployee(id??1), PageTitle = \"Employee Details\" }; return View(homeDetailsViewModel); } [HttpGet] public ViewResult Create() { return View(); } [HttpPost] public IActionResult Create(Employee employee) { if (ModelState.IsValid) { Employee newEmployee = _employeeRepository.Add(employee); return RedirectToAction(\"details\", new { id = newEmployee.Id }); } return View(); } } ./Mvc/Views/Home/Create.cshtml . @model Employee @inject IEmployeeRepository _empRepository @{ ViewBag.Title = \"Create Employee\"; } &lt;form asp-controller=\"Home\" asp-action=\"Create\" method=\"post\"&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Name\" class=\"form-label\"&gt;&lt;/label&gt; &lt;input asp-for=\"Name\" class=\"form-control\" /&gt; &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Email\" class=\"form-label\"&gt;&lt;/label&gt; &lt;input asp-for=\"Email\" class=\"form-control\" /&gt; &lt;span asp-validation-for=\"Email\" class=\"text-danger\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"mb-3\"&gt; &lt;label asp-for=\"Departament\" class=\"form-label\"&gt;&lt;/label&gt; &lt;select asp-for=\"Departament\" asp-items=\"Html.GetEnumSelectList&lt;Dept&gt;()\" class=\"form-control\"&gt; &lt;option value=\"\"&gt;Please select departament&lt;/option&gt; &lt;/select&gt; &lt;span asp-validation-for=\"Departament\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div asp-validation-summary=\"All\" class=\"text-danger\"&gt;&lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm-10\"&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Create&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm-10\"&gt; Total Employees Count = @_empRepository.GetAllEmployees().Count() &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; ./Mvc/Views/Home/Details.cshtml . @model HomeDetailsViewModel @{ ViewBag.Title = \"Employee Details\"; } &lt;div class=\"row justify-content-center m-3\"&gt; &lt;div class=\"col-sm-8\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-header\"&gt; &lt;h1&gt;@Model.Employee.Name&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"card-body text-center\"&gt; &lt;img class=\"card-img-top\" src=\"~/images/noimage.jpg\" /&gt; &lt;h4&gt;Employee ID : @Model.Employee.Id&lt;/h4&gt; &lt;h4&gt;Email : @Model.Employee.Email&lt;/h4&gt; &lt;h4&gt;Departament : @Model.Employee.Departament&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"card-footer text-center\"&gt; &lt;a asp-controller=\"home\" asp-action=\"index\" class=\"btn btn-primary\"&gt;Back&lt;/a&gt; &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Edit&lt;/a&gt; &lt;a href=\"#\" class=\"btn btn-danger\"&gt;Delete&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ./Mvc/Views/Home/Index.cshtml . @model IEnumerable&lt;Employee&gt; @{ ViewBag.Title = \"Employee List\"; } &lt;div class=\"row row-cols-1 row-cols-md-3 g-4 mt-3\"&gt; @foreach (var employee in Model) { &lt;div class=\"col\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-header\"&gt; &lt;h5 class=\"card-title\"&gt;@employee.Name&lt;/h5&gt; &lt;/div&gt; &lt;img class=\"card-img-top\" src=\"~/images/noimage.jpg\" asp-append-version=true /&gt; &lt;div class=\"card-footer text-center\"&gt; &lt;a asp-controller=\"home\" asp-action=\"details\" asp-route-id=\"@employee.Id\" class=\"btn btn-primary m-1\"&gt;View&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; } &lt;/div&gt; . ",
    "url": "/tutorial_pages/AppEmployeeManagement/8.%20HomeController.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/8.%20HomeController.html"
  },"87": {
    "doc": "9. Bootstrap&Jquery",
    "title": "9. Bootstrap&Jquery",
    "content": "libman ./Mvc/wwwroot/images/employees.png ./Mvc/Views/_ViewImports.cshtml ./Mvc/Views/_ViewStart.cshtml ./Mvc/Views/Shared/_Layout.cshtml . libman Bootstrap Jquery . cd ./Mvc mkdir wwwroot libman init libman install bootstrap libman install jquery cd ../Mvc/wwwroot/images/employees.png . wwwroot/images/employees.png ./Mvc/Views/_ViewImports.cshtml . @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers ./Mvc/Views/_ViewStart.cshtml . @{ Layout = \"_Layout\"; } ./Mvc/Views/Shared/_Layout.cshtml . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt; &lt;link href=\"~/lib/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt; &lt;script src=\"~/lib/jquery/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"~/lib/bootstrap/js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;title&gt;@ViewBag.Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;header class=\"navbar navbar-expand-sm navbar-dark bg-dark\"&gt; &lt;nav class=\"container\"&gt; &lt;a class=\"navbar-brand\" asp-action=\"index\" asp-controller=\"home\"&gt; &lt;img src=\"~/images/employees.png\" height=\"30\" width=\"30\" /&gt; &lt;/a&gt; &lt;button type=\"button\" class=\"navbar-toggler\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapsibleNavbar\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\"&gt; &lt;ul class=\"navbar-nav\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a asp-action=\"index\" asp-controller=\"home\" class=\"nav-link\"&gt;List&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a asp-action=\"create\" asp-controller=\"home\" class=\"nav-link\"&gt;Create&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/header&gt; &lt;main class=\"container\"&gt; @RenderBody() &lt;/main&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "/tutorial_pages/AppEmployeeManagement/9.%20Bootstrap.html",
    "relUrl": "/tutorial_pages/AppEmployeeManagement/9.%20Bootstrap.html"
  },"88": {
    "doc": "9. Теги",
    "title": "9. Теги",
    "content": "Посмотреть какие теги есть git tag . Создать тег v1.0.0 git tag v1.0.0 повесить тег на коммит где HEAD git tag v1.0.0 xxxx повесить тег на коммит xxxx . Запушить тег в remote-репозиторий git push origin v1.0.0 . Удалить тег локально git tag -d v1.0.0 . Удалить тег из remote git push origin --delete v1.0.0 . Сделать тег с аннотацией git tag -a v1.0.0 xxxx . ",
    "url": "/manual_pages/Git/9.%20Tags.html",
    "relUrl": "/manual_pages/Git/9.%20Tags.html"
  },"89": {
    "doc": "9. Юнит-тесты",
    "title": "Юнит-тесты",
    "content": "UnitTests/DataAccessTests/UnitTest1.cs . dotnet new xunit -o ./UnitTests/ dotnet sln add ./UnitTests/ cd ./UnitTests/ dotnet add reference ../DataAccess/ cd .. dotnet test /p:CollectCoverage=opencover dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=\"[xunit*]\\*\" /p:CoverletOutput=\"./TestResults/\" . ",
    "url": "/tutorial_pages/AppOpenLoops/9.%20%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D1%8B.html#%D1%8E%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D1%8B",
    "relUrl": "/tutorial_pages/AppOpenLoops/9.%20%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D1%8B.html#юнит-тесты"
  },"90": {
    "doc": "9. Юнит-тесты",
    "title": "9. Юнит-тесты",
    "content": " ",
    "url": "/tutorial_pages/AppOpenLoops/9.%20%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D1%8B.html",
    "relUrl": "/tutorial_pages/AppOpenLoops/9.%20%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D1%8B.html"
  },"91": {
    "doc": "Docker",
    "title": "Docker",
    "content": " ",
    "url": "/leftmenu/900.%20Docker.html",
    "relUrl": "/leftmenu/900.%20Docker.html"
  },"92": {
    "doc": "JekyllApp",
    "title": "JekyllApp",
    "content": " ",
    "url": "/leftmenu/900.%20JekyllApp.html",
    "relUrl": "/leftmenu/900.%20JekyllApp.html"
  },"93": {
    "doc": "Jenkins",
    "title": "Jenkins",
    "content": "Прямая ссылка на http://45.89.52.66:50101/ . sudo systemctl start jenkins.service Запуск sudo systemctl restart jenkins.service Перезапустить sudo systemctl stop jenkins.service Остановить . sudo systemctl status jenkins.service Статус. должно быть active(running) . Поменять порт с 8080 на другой systemctl edit jenkins Добавить [Service] Environment=\"JENKINS_PORT=8081\" . sudo nano /etc/default/jenkins Здесь настройки порта менять не получится. Альтернативы Jenkins Bamboo, CircleCi, Gitlab CICD, Jetbrains Teamcity, Travis . ",
    "url": "/leftmenu/900.%20Jenkins.html",
    "relUrl": "/leftmenu/900.%20Jenkins.html"
  },"94": {
    "doc": "Ubuntu",
    "title": "Создать пару ключей SSH",
    "content": "ssh-keygen Enter Enter . ",
    "url": "/leftmenu/900.%20Ubuntu.html#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D0%BF%D0%B0%D1%80%D1%83-%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%B9-ssh",
    "relUrl": "/leftmenu/900.%20Ubuntu.html#создать-пару-ключей-ssh"
  },"95": {
    "doc": "Ubuntu",
    "title": "Ubuntu",
    "content": "clear очистить экран cat /etc/os-release версия ОС sudo ufw reset никогда не нажимать . ",
    "url": "/leftmenu/900.%20Ubuntu.html",
    "relUrl": "/leftmenu/900.%20Ubuntu.html"
  },"96": {
    "doc": "901. Docker Курсы/Туториалы",
    "title": "901. Docker Курсы/Туториалы",
    "content": " ",
    "url": "/manual_pages/Docker/901.%20DockerTutorials.html",
    "relUrl": "/manual_pages/Docker/901.%20DockerTutorials.html"
  },"97": {
    "doc": "AdvitGit",
    "title": "AdvitGit",
    "content": "Перед началом работы всегда делается git pull . Работа с локальным репозиторием . git status git add * git commit -m \"Initial\" . История . echo \"aa\" &gt; file.txt # Создать новый файл с текстом аа echo \"aa\" &gt;&gt; file4.txt # Добавить в конец файла текст аа . Показать изменения во всех файлах в предыдущем коммите . git log git log -p ??? git log -1 -p ??? . Вернуть файл в состояние до изменения. Чтобы git status показывал “no changes” . git checkout -- file1.txt . Посмотреть что было добавлено через git add в current commit . git diff --staged . Github SSH . Создать репозиторий через WebGUI гитхаба. git clone ....git echo \"HelloWorld\" &gt; file1.txt git add . git commit -m \"My first\" git push origin . Ветки . В master коммиты не делаются. Только merge. git init myapp git add . git commit -m \"message\" git branch develop #Создание бранчхеда fix_error git checkout develop #Передвинуть HEAD на бранчхед fix_error . Полный рабочий цикл . Ссылка Ветку обычно называют имя-разрабочика_номер-тикета . git checkout -b aq_task001 #Работа с проектом... git add . git commit -m \"Added changes\" git push --set-upstream origin aq_task001 #Со своего гитхаба нажимем кнопку Compare &amp; pull request #Пишем коммент Create Pull Request . Сеньор делает Merge pull request Удаляется бранч локально git branch -d aq_task001 Удаляется бранч удаленно git push origin --delete aq_task001 . Tags . git tags git tag v1.0.1 Создать тег git tag -d v1.0.1 удалить тег локально git push origin --delete v1.0.1 удалить удаленно . ",
    "url": "/manual_pages/Git%20Branching/AdvitGit.html",
    "relUrl": "/manual_pages/Git%20Branching/AdvitGit.html"
  },"98": {
    "doc": "Apache",
    "title": "Apache",
    "content": "sudo systemctl start apache2.service sudo systemctl restart apache2.service . cd /var/www/html/ . sudo systemctl status apache2.service -l --no-pager journalctl -xe . sudo lsof -i:80 sudo lsof -i:443 sudo lsof -i -P -n | grep LISTEN Все порты где есть прослушка . nano /etc/httpd/conf/httpd.conf nano /etc/apache2/ports.conf . sudo ufw app list Должен быть Apache. Если нет, то добавить: sudo ufw allow 'Apache' . Если нет профиля: sudo nano /etc/ufw/applications.d/apache2-utils.ufw.profile . [Apache] title=Web Server description=Apache v2 is the next generation of the omnipresent Apache web server. ports=80/tcp [Apache Secure] title=Web Server (HTTPS) description=Apache v2 is the next generation of the omnipresent Apache web server. ports=443/tcp [Apache Full] title=Web Server (HTTP,HTTPS) description=Apache v2 is the next generation of the omnipresent Apache web server. ports=80,443/tcp . Forbidden 403 . На папке html . find ./ -type d -exec chmod 755 -R {} \\; find ./ -type f -exec chmod 644 {} \\; . Удаление . sudo apt remove apache2 sudo apt-get autoremove . ",
    "url": "/manual_pages/Ubuntu/Apache.html",
    "relUrl": "/manual_pages/Ubuntu/Apache.html"
  },"99": {
    "doc": "Cantor Git",
    "title": "Примеры коммит-мессаджей",
    "content": ". | Примеры Commit Message разработчиков Git | jossbuchea - Semantic Commit Messages | Conventional Commits | Sparkbox - Semantic Commit Messages | Karma Git Commit Msg | . ",
    "url": "/manual_pages/Git%20Branching/CantorGit.html#%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82-%D0%BC%D0%B5%D1%81%D1%81%D0%B0%D0%B4%D0%B6%D0%B5%D0%B9",
    "relUrl": "/manual_pages/Git%20Branching/CantorGit.html#примеры-коммит-мессаджей"
  },"100": {
    "doc": "Cantor Git",
    "title": "Cantor Git",
    "content": " ",
    "url": "/manual_pages/Git%20Branching/CantorGit.html",
    "relUrl": "/manual_pages/Git%20Branching/CantorGit.html"
  },"101": {
    "doc": "Dotnet & More",
    "title": "Dotnet & More",
    "content": "#29 DDD . | Паттерны на собесе: GOF, GRASP, Martin Fowler Enterprise Patterns Видео с минутами | Алгоритмы: Задачи на разворот linked list | Книга по DDD Vaugh Vernon: Implementing Domain Driven Design | Jetbrains собес: Алгоритмы, Многопоточночность, книги Танненбаума | . #31 Многопоточность посмотреть позже . #32 Интервью на английском . ",
    "url": "/manual_pages/dotnet/DotnetMore.html",
    "relUrl": "/manual_pages/dotnet/DotnetMore.html"
  },"102": {
    "doc": "Github Actions Minin",
    "title": "Github Actions React",
    "content": "git remote add origin https://github.com/aq-coding/github-actions-react.git git push -u master . Создать руками папку .github/workflows Создать руками testing.yml . Marketplace: Actions . Marketplace/Actions Use the latest version Скопировать . - name: Checkout uses: actions/checkout@v2.6.0 . Несколько джобов параллельно . name: Test React App # Триггер на каждый новый залив on: push jobs: test: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm install - name: Test application run: npm run test lint: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run lint build: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run build - name: Deploy run: echo Deploying... Сначала test, потом lint, потом build . name: Test React App # Триггер на каждый новый залив on: push jobs: test: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm install - name: Test application run: npm run test lint: runs-on: ubuntu-latest needs: test steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run lint build: runs-on: ubuntu-latest needs: lint steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run build - name: Deploy run: echo Deploying... ",
    "url": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%201.html#github-actions-react",
    "relUrl": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%201.html#github-actions-react"
  },"103": {
    "doc": "Github Actions Minin",
    "title": "Github Actions Minin",
    "content": "Создание репозитория . index.html . git init git add . git commit -m \"init\" . Создать на гитхабе репозиторий github-actions git remote add origin https://github.com/aq-coding/github-actions.git git push -u origin master . Если не работает git push: git remote set-url origin https://новый_токен@github.com/aq-coding/github-actions.git git push -u origin master . Страница создания workflow . https://github.com/aq-coding/github-actions/actions/new . Выбрать set up a workflow yourself github-actions./github/workflows/demo.yml in master . #Имя любое name: Demo Workflow #on какое событие слушать # Ctrl + space список ивентов on: workflow_dispatch jobs: #Имя работы любое print: # Выбор раннера runs-on: ubuntu-latest # Внутри джоба print расписываем шаги: steps: #Имя шага - name: Print to console run: echo Hello GH Actions! . Запуск workflow demo.yml . Actions &gt; Demo Workflow https://github.com/aq-coding/github-actions/actions/workflows/demo.yml Run Workflow . Отработавшие workflows . Actions &gt; All Workflows https://github.com/aq-coding/github-actions/actions . Изменить workflow . Actions &gt; Demo Workflow View workflow file . ",
    "url": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%201.html",
    "relUrl": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%201.html"
  },"104": {
    "doc": "Github Actions Minin 2",
    "title": "Github Actions React",
    "content": "git remote add origin https://github.com/aq-coding/github-actions-react.git git push -u master . Создать руками папку .github/workflows Создать руками testing.yml . Marketplace: Actions . Marketplace/Actions Use the latest version Скопировать . - name: Checkout uses: actions/checkout@v2.6.0 . Несколько джобов параллельно . name: Test React App # Триггер на каждый новый залив on: push jobs: test: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm install - name: Test application run: npm run test lint: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run lint build: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run build - name: Deploy run: echo Deploying... Сначала test, потом lint, потом build . name: Test React App # Триггер на каждый новый залив on: push jobs: test: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm install - name: Test application run: npm run test lint: runs-on: ubuntu-latest needs: test steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run lint build: runs-on: ubuntu-latest needs: lint steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run build - name: Deploy run: echo Deploying... Последовательно, в одном джобе . name: Test React App on: push jobs: deploy: runs-on: ubuntu-latest steps: - name: Get repository code uses: actions/checkout@v2.6.0 - name: Install dependencies run: npm ci - name: Test application run: npm run test - name: Lint application run: npm run lint - name: Build application run: npm run build - name: Deploy run: echo Deploying... ",
    "url": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%202.html#github-actions-react",
    "relUrl": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%202.html#github-actions-react"
  },"105": {
    "doc": "Github Actions Minin 2",
    "title": "Github Actions Minin 2",
    "content": " ",
    "url": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%202.html",
    "relUrl": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%202.html"
  },"106": {
    "doc": "Github Actions Minin 3",
    "title": "Github Actions Minin 3",
    "content": "Contexts &amp; Expressions . В папка .github/workflows создать pull_request.yml . Объект контекста, который называется {{github}} . pull_request.yml . name: Print Pull Request Context #Запуск либо по кнопке либо по пулл-реквесту on: workflow_dispatch: pull_request: types: [opened, edited, reopened] jobs: print: runs-on: ubuntu-latest steps: - name: Print context run: echo $\"{{ toJSON(github.event) }}\" . Зауск только при пуше в master или изменения в какой-то папке . deployment.yaml . on: push: branches: 'master' paths: - '**.js' jobs: . Pull request, . Перейти на вкладку Pull Requests . Выбрать New pull Request . Выбрать base:master &lt;- compare:dev . Выбрать Create pull Request . paths-ignore . Не выполнять джоб если изменения в определенных файлах . on: push: paths-ignore: - '.github/workflows/*' . Marketplace: Cache . uses: actions/cache@v3 . steps: - name: Get repository code uses: actions/checkout@v3 - name: Cache deps uses: actions/cache@v3 with: path: ~/.npm key: node-modules-deps - name: Install dependencies run: npm ci - name: Lint application run: npm run lint . В key можно считать хэш с lock-файла key: node-modules-${{ hashFiles(‘**/package-lock.json’) }} . Матрицы . Параллельно протестировать билды на 14 и 16 ноде и на ubuntu-latest и на windows . strategy: matrix: node-version: [14, 16] os: [ubuntu-latest, windows-latest] . После этого в runs-on можно записать: . runs-on: ${{ matrix.os }} . steps: . | name: Install Node Js uses: actions/setup-node@v3 with: node-version: ${{ matrix.node-version }} | . Разрешить продолжать работаеть если один из элементов матрицы закончился с ошибкой: . build: continue-on-error: true . ",
    "url": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%203.html",
    "relUrl": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%203.html"
  },"107": {
    "doc": "Github Actions Minin 4",
    "title": "Github Actions Minin 4",
    "content": "Артифакты . Артифакты это билды и тест-репорты Существует отдельный экшн Upload a Build Artifact Download A Build Artifact . name: Build jobs: build: runs-on: ubuntu-latest steps: - name: Get code uses: actions/checkout@v3 - name: Install deps run: npm ci - name: Build project run: npm run build - name: Upload Artifact uses: actions/upload-artifact@v3 with: path: build name: build-files deploy: needs: build runs-on: ubuntu-latest steps: - name: Get build project uses: actions/download-artifact@v3 with: name: build-files . Environment, Секреты . name: Environment on: push: workflow_dispatch: env: NODE_ENV: production GH_SECRET: 42 jobs: build: runs-on: ubuntu-latest steps: - name: Print Env Build run: | echo \"${{ env.NODE_ENV}}\" echo \"${{ env.GH_SECRET}}\" deploy: runs-on: ubuntu-latest steps: - name: Print Env Deploy run: | echo \"${{ env.NODE_ENV }}\" echo \"${{ env.GH_SECRET }}\" . Секреты задаются в настройках репозитория. Один раз настроив, его уже нельзя будет прочитать. ",
    "url": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%204.html",
    "relUrl": "/manual_pages/Github%20Actions/grandchildren/GHA%20Minin%204.html"
  },"108": {
    "doc": "Git Flow",
    "title": "Git Flow",
    "content": "Ссылка . Git Flow . main release develop feature/1, feature/2, feature/3 bug/1, bug/2, bug/3 . | Две ветки: Main коммиты в нее делать нельзя Develop коммиты в них делать нельзя | Ветки, в которые делают коммиты Feature/Название_задачи Bug/Название_задачи | Из Feature и Bug коммиты попадают в Develop через Pull Request | Из Develop коммиты попадают в Release/R1 | Из Release попадают в Main. В Main на коммиты ставятся теги. | Иногда из Main созда Github FLow . Лучше подходит для микросервисов main feature . | . ",
    "url": "/manual_pages/Github/GitFlow.html",
    "relUrl": "/manual_pages/Github/GitFlow.html"
  },"109": {
    "doc": "Github Actions Tutorials",
    "title": "Github Actions Tutorials",
    "content": " ",
    "url": "/manual_pages/Github%20Actions/Github%20Actions%20Minin.html",
    "relUrl": "/manual_pages/Github%20Actions/Github%20Actions%20Minin.html"
  },"110": {
    "doc": "Github Actions Nana",
    "title": "Github Actions Nana",
    "content": "Github Actions: Docker Buind &amp; Push . Docker Build &amp; Push Actions . ",
    "url": "/manual_pages/Github%20Actions/GithubActionsNana.html",
    "relUrl": "/manual_pages/Github%20Actions/GithubActionsNana.html"
  },"111": {
    "doc": "Jekyll just-the-docs",
    "title": "Jekyll just-the-docs",
    "content": "jobs: build: runs-on: ubuntu-latest steps: . GitHub Action: Checkout . - name: Checkout uses: actions/checkout@v3 . GitHub Action: Setup Ruby, JRuby and TruffleRuby . - name: Setup Ruby, JRuby and TruffleRuby uses: ruby/setup-ruby@v1.133.0 with: ruby-version: '3.1' bundler-cache: true . GitHub Action: Configure GitHub Pages . - name: Setup Pages id: pages uses: actions/configure-pages@v2.1.3 . RUN Сгенерить html-файлы в папку _site . - name: Build with Jekyll run: bundle exec jekyll build --baseurl \"$\" env: JEKYLL_ENV: production . GitHub Action: Upload GitHub Pages artifact Automatically uploads an artifact from the ‘./_site’ directory by default . - name: Upload GitHub Pages artifact uses: actions/upload-pages-artifact@v1.0.7 . ",
    "url": "/manual_pages/Github%20Actions/Jekyll%20just-the-docs.html",
    "relUrl": "/manual_pages/Github%20Actions/Jekyll%20just-the-docs.html"
  },"112": {
    "doc": "Установка на Ubuntu",
    "title": "Установка на Ubuntu",
    "content": "Прямая ссылка на http://45.89.52.66:50101/login . Инструкция DigitalOcean Инструкция с оф сайта Jenkins . Проверить версии софта на сервере . cat /etc/os-release версия ОС . java -version версия Java. Должна быть 11 ? . sudo lsof -i:8080 занят ли порт 8080. Должен быть свободен. apt remove apache2 если там апач . grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* Показать sources.list . Репозиторий уже мог быть добавлен. More . Обновление локальных пакетов . sudo apt upgrade sudo apt update sudo apt install ca-certificates . Установка Java . Удалить всю старую джаву. More dpkg-query -W -f='${binary:Package}\\n' | grep -E -e '^(ia32-)?(sun|oracle)-java' -e '^openjdk-' -e '^icedtea' -e '^(default|gcj)-j(re|dk)' -e '^gcj-(.*)-j(re|dk)' -e '^java-common' | xargs sudo apt-get -y remove sudo apt-get -y autoremove . Установить с нуля Java 11 sudo apt-get install openjdk-11-jdk sudo apt-get install fontconfig . Добавить путь к Java nano /etc/environment Прописать JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\" source /etc/environment Перезагрузить echo $JAVA_HOME Проверить всё ли работает . Добавление репозитория jenkins-stable binary . wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add - Добавление ключа репозитория . sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list' Добавление в sources.list . Собственно установка . sudo apt install jenkins . UFW . Проверить, запущен ли UFW sudo ufw status . Ответ должен быть: Когда UFW включен, 8080 открыт, OpenSSH включен Status: active To Action From -- ------ ---- 8080 ALLOW Anywhere OpenSSH ALLOW Anywhere 8080 (v6) ALLOW Anywhere (v6) OpenSSH (v6) ALLOW Anywhere (v6) . Если пустые правила, надо открыть 8080 (Jenkins по умолчанию) и добавить OpenSSH sudo ufw allow 8080 sudo ufw allow OpenSSH sudo ufw enable . curl localhost:8080 должно работать netstat -ntulp | grep 8080 . Первый запуск . Прямая ссылка на http://45.89.52.66:50101/login cat /var/lib/jenkins/secrets/initialAdminPassword выставить. Установить Suggested. Настройка языка . http://45.89.52.66:50101/ Ctrl+F “Locale” Default Language: en Ignore browser preference . ",
    "url": "/manual_pages/Jenkins/grandchildren/JenkinsInstallOnUbuntu.html",
    "relUrl": "/manual_pages/Jenkins/grandchildren/JenkinsInstallOnUbuntu.html"
  },"113": {
    "doc": "Jenkins Installation",
    "title": "Jenkins Installation",
    "content": " ",
    "url": "/manual_pages/Jenkins/JenkinsInstallation.html",
    "relUrl": "/manual_pages/Jenkins/JenkinsInstallation.html"
  },"114": {
    "doc": "Jenkins Jobs Adv",
    "title": "Jenkins jobs",
    "content": "New Item Прямая ссылка на http://45.89.52.66:50101/newJob . ",
    "url": "/manual_pages/Jenkins/JenkinsJobsAdv.html#jenkins-jobs",
    "relUrl": "/manual_pages/Jenkins/JenkinsJobsAdv.html#jenkins-jobs"
  },"115": {
    "doc": "Jenkins Jobs Adv",
    "title": "Adv1",
    "content": "Установить плагин Publish over SSH . Джоб 1 . New Item - Freestyle project Item name: MyJobNumber-1 Description: Adv1 first job . Разрешить выполнять несколько билдов одновременно: . | Execute concurent builds if necessary | . Удалять старые билды из папки cd /var/lib/jenkins/jobs/ИмяДжоба/builds : . | Discard old builds Обычно ставят max of builds to keep: 5 | . Build: Execute shell: . echo \"HelloWorld!\" echo \"This is Build number: $BUILD_NUMBER\" pwd sleep 5 whoami echo \"Name of this Build is: $BUILD_DISPLAY_NAME\" . Каждый запуск создает директорию в: . cd /var/lib/jenkins/jobs ll . Job 3 . New Item - Freestyle project Discard old builds: Max of builds: 5 . | Execute concurrent | . Build: Execute Shell: . echo \"==========Build Started==========\" cat &lt;&lt;EOF &gt;&gt; index.html &lt;html&gt; &lt;body bgcolor=black&gt; &lt;center&gt; &lt;h2&gt;&lt;font color=yellow&gt;Hello Job&lt;/font&gt;&lt;/h2&gt; &lt;font color=blue&gt;Job&lt;/font&gt; &lt;/center&gt; &lt;/body &lt;/html&gt; EOF echo \"==========Build Finished==========\" . Execute Shell: . echo \"==========Test Started==========\" result=`grep \"Hello\" index.html | wc -l` echo $result if [ \"$result\" = \"1\" ] then echo \"Test Passed\" exit 0 else echo \"Test Failed\" exit 1 fi echo \"==========Test Finished==========\" . Execute Shell: . echo \"==========Deployment Started==========\" . Post-build Action Send build artifacts over SSH: Source files /* Remote directory ` ` Exec command sudo service httpd restart . ",
    "url": "/manual_pages/Jenkins/JenkinsJobsAdv.html#adv1",
    "relUrl": "/manual_pages/Jenkins/JenkinsJobsAdv.html#adv1"
  },"116": {
    "doc": "Jenkins Jobs Adv",
    "title": "Jenkins Jobs Adv",
    "content": " ",
    "url": "/manual_pages/Jenkins/JenkinsJobsAdv.html",
    "relUrl": "/manual_pages/Jenkins/JenkinsJobsAdv.html"
  },"117": {
    "doc": "Jenkins Plugins",
    "title": "Publish over SSH",
    "content": "Добавление удаленного сервера . Manager Jenkins &gt; Configure Systems Publish over SSH . Key Name: Любое имя Hostname: ip-адрес Username: Remote directory: /var/www/html . Test Configurations . Настройки шага джоба . Post-build Action Send build artifacts over SSH: Source files /* Remote directory Exec command sudo service httpd restart . ",
    "url": "/manual_pages/Jenkins/JenkinsPlugins.html#publish-over-ssh",
    "relUrl": "/manual_pages/Jenkins/JenkinsPlugins.html#publish-over-ssh"
  },"118": {
    "doc": "Jenkins Plugins",
    "title": "Jenkins Plugins",
    "content": " ",
    "url": "/manual_pages/Jenkins/JenkinsPlugins.html",
    "relUrl": "/manual_pages/Jenkins/JenkinsPlugins.html"
  },"119": {
    "doc": "JenkinsSem",
    "title": "JenkinsSem",
    "content": " ",
    "url": "/manual_pages/Jenkins/JenkinsSem.html",
    "relUrl": "/manual_pages/Jenkins/JenkinsSem.html"
  },"120": {
    "doc": "Manage Jenkins",
    "title": "Изменить цвет результата маркера билда",
    "content": "Green Balls не работает . ",
    "url": "/manual_pages/Jenkins/grandchildren/ManageJenkins.html#%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B8%D1%82%D1%8C-%D1%86%D0%B2%D0%B5%D1%82-%D1%80%D0%B5%D0%B7%D1%83%D0%BB%D1%8C%D1%82%D0%B0%D1%82%D0%B0-%D0%BC%D0%B0%D1%80%D0%BA%D0%B5%D1%80%D0%B0-%D0%B1%D0%B8%D0%BB%D0%B4%D0%B0",
    "relUrl": "/manual_pages/Jenkins/grandchildren/ManageJenkins.html#изменить-цвет-результата-маркера-билда"
  },"121": {
    "doc": "Manage Jenkins",
    "title": "Manage Jenkins",
    "content": "Configure System . # of excutors: 4 Usage: только .net Jenkins URL: Поставить 8081 Usage Statistics: Отключить Save . Configure Global Security . Authorization: Logged-in users can do anything . | Allow anonymous read access | . Установка обновления . cd /usr/share/jenkins Скачать в эту папку sudo mv jenkins.war jenkins_новая_директория ll sudo service jenkins restart . ",
    "url": "/manual_pages/Jenkins/grandchildren/ManageJenkins.html",
    "relUrl": "/manual_pages/Jenkins/grandchildren/ManageJenkins.html"
  },"122": {
    "doc": "Manage Plugins",
    "title": "Manage Plugins",
    "content": "Установка плагинов . http://45.89.52.66:50101/pluginManager/ http://45.89.52.66:50101/pluginManager/available/ При установка плагина желательно поставить галку . | Restart Jenkins when installation После установки плагина желательно делать sudo service jenkins restart | . ",
    "url": "/manual_pages/Jenkins/grandchildren/ManagePlugins.html",
    "relUrl": "/manual_pages/Jenkins/grandchildren/ManagePlugins.html"
  },"123": {
    "doc": "Marketplace",
    "title": "Marketplace",
    "content": "Checkout . jobs: build: runs-on: ubuntu-latest steps: . - name: Checkout uses: actions/checkout@v3 . ",
    "url": "/manual_pages/Github%20Actions/Marketplace.html",
    "relUrl": "/manual_pages/Github%20Actions/Marketplace.html"
  },"124": {
    "doc": "Putty",
    "title": "Putty",
    "content": "Для того чтобы не рвалось соединения в Connection поставить Seconds between keepalives 30 . ",
    "url": "/manual_pages/Ubuntu/Putty.html",
    "relUrl": "/manual_pages/Ubuntu/Putty.html"
  },"125": {
    "doc": "SK Вопросы",
    "title": "SK Вопросы",
    "content": "Evantual consistency что это? . DI vs IoC. Что это и как связаны с Dependency Container . Как работает WCF . Что такое gRPC ? . Какие характеристики микросервисной архитектуры? . IQueryable наружу библиотеки, можно ли? . Чем ValueTask отличается от Task? . Как прикрутить к готовому решению новое приложение? . IHttpClientFactory vs HttpClient . Паттерн API GateWay . Что такое event-sourcing? . CQRS vs Event sourcing . Что такое Blazor? . Как ускорить Entity Framework? . Какие уровни OSINT и на каком уровне http? . CQRS vs SQL View . Что такое DispatchProxy . ToArray() vs ToList() . DDD vs Anemic . Ссылка . Что такое vertical slice architecture? . Ссылка . Рефакторинг vs Новый функционал, чем отличаются? . Исправление кода без изменения контракта и бизнес-логики . XML-комментарии в коде это что? Summary? . Что такое SpecFlow? . Фреймворк для BDD (Похоже на TDD) Генерирует тесты . Чем DDD отличается от Clean Architecture? . Две разных книги DDD: Аггрегаты, Энтити, Сервисы, какие должны быть между ними зависимост Clean Architecture: Как располагать код . String.Empty vs “” . Одинаково . OpenID vs SAML . Ссылка . CQRS как расшифровыывается? . Command query responsibility segregation . Для чего MassTransit? . Надстройка на RabbitMQ Для сериализации и десериализации сообщений RabbitMQ . Что такое lowering в C#? . Писать минимально сахара вроде var или foreach . Что такое CorreliationID/TraceID в микросервисе? . id-запроса, по которому можно найти его в логах . Какие конфиги есть в asp.net core? . appsettings.json и весь каскад Configuration launchsettings.json . Сколько способов загрузить данные из БД? . SELECT INCLUDE Explicit - load collection, load reference lazy loading - Зло, не использовать. В EF 6 использовалась по умолчанию, но очень грузила сериализацияей и в EF 7 ее отключили. Когда использовать gRPC? . В микросервисах, чтобы они между собой общались . Паттерны Orchestration и Choreography когда использовать? . Choreography внутри микросервиса, Orchestration поверх. Зачем вручную выбрасывать ArgumentNullReference? . Ссылка Исторически в бэкенде активно кидали эксепшны когда была хоть какая-то ошибка. Сейчас пользователю уже не принято показывать текст эсепшна. ArgumentNullReference, MicroserviceNullReference для собственных эксепшнов, NullReference для системных. Если существует метод, который например возвращает имя файла filename и размер filesize в байтах, и потребовалось добавить возможность возвращать байты вместо названия, то какой способ реализации использовать? . Создать новый метод, который будет возвращать байты. Это Single Responsibility Principle. Это другая ответственность. Что такой Automapper и зачем он нужен? . Очень помогает для передачи данных из Model во ViewModel Считается что при работе с DTO не всегда подходит . Поддерживает ли Impersonation в ASP.NET Core? ЧТо это? . Когда запросы отправляются на sql-сервер от имени какого-то пользователя Не поддерживается . Чем отличается аутентификация от авторизации? . Сначала Аутенификация, потом Авторизация Аутентификация: Sign In Авторизация: Роли . Что такое SOLID? . SCP принцип . Single repsponsibility principle Модуль должен иметь только одну причину для изменения . Может ли интерфейс иметь реализацию? Реальные свойства, методы? . Через extension-методы В C# 8 . Чем отличается interface до и после C# 8. До: Только методы, свойства, индексаторы, события После: . | default-члены, | private, protected | virtual absctract, static | . Какие уровни тестирования существуют? . Unit, Integration, System, на готовой системе(обычно то же что и функциональное) . Guid vs Long для идентификатора, какой лучше? . Guid . Как общаются между собой микросервисы? Все способы. MQ (RabbitMQ…) REST или gRPC-запросы. gRPC специально для этого сделан. Смешанная . Является ли запрос приложения к БД бизнес-процессом? . нет, потому что . Что такое архитектура? . организация элементов программы и способов взаимодействия между ними . Что такое SignalR? . WebSocket, Long Polling, Server sent event, Forever Frame . Версионность WEB API, какие есть способы? . | Роутинг - в тело запроса вставляется версия | Еще бывает header | Что такое валидация, какие виды? . Клиентская, в форме Серверная ASPNET + Валидация базы данных - foreign кеи Проверка бизнес правил . | . ",
    "url": "/manual_pages/0.%20Interview/SK.html",
    "relUrl": "/manual_pages/0.%20Interview/SK.html"
  },"126": {
    "doc": "TShock",
    "title": "TShock",
    "content": " ",
    "url": "/manual_pages/Ubuntu/TShock.html",
    "relUrl": "/manual_pages/Ubuntu/TShock.html"
  },"127": {
    "doc": "UFW",
    "title": "UFW",
    "content": "https://askubuntu.com/questions/541675/ufw-is-blocking-all-even-when-i-set-rules-to-allow sudo ufw status verbose . sudo iptables -L -v -n Посмотреть iptables sudo nano /etc/default/ufw Конфигурация UFW (включить выключить IPV6=YES) sudo nano /etc/ufw/sysctl.conf Конфигурация UFW . ufw reset никогда не нажимать . ufw enable вкл ufw disable вкл ufw Reload . Базовая настройка UFW . Проверить чтобы стояло IPV6=yes . sudo nano /etc/default/ufw . Запретить все входящие, разрешить все исходящие . sudo ufw default deny incoming . sudo ufw default allow outgoing . Разрешить входящие ssh . sudo ufw allow ssh sudo ufw allow 500,4500/udp sudo ufw allow 7777/tcp sudo ufw allow 8080/tcp sudo ufw allow 9418/tcp sudo ufw allow 80/tcp sudo ufw allow 443/tcp . Включить . sudo ufw enable . Дальше . Если надо удалить правило: . sudo ufw status numbered . sudo ufw delete 2 . IKEV2 Восстановление . ip route show default . sudo ufw allow 500,4500/udp . sudo nano /etc/ufw/before.rules . Добавить перед *filter (интерфейс ens3) . *nat -A POSTROUTING -s 10.10.10.0/24 -o ens3 -m policy --pol ipsec --dir out -j ACCEPT -A POSTROUTING -s 10.10.10.0/24 -o ens3 -j MASQUERADE COMMIT *mangle -A FORWARD --match policy --pol ipsec --dir in -s 10.10.10.0/24 -o ens3 -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 COMMIT . Добавить после #End required lines (секции *filters) . -A ufw-before-forward --match policy --pol ipsec --dir in --proto esp -s 10.10.10.0/24 -j ACCEPT -A ufw-before-forward --match policy --pol ipsec --dir out --proto esp -d 10.10.10.0/24 -j ACCEPT . Дальше . sudo nano /etc/ufw/sysctl.conf . В конец файла . net/ipv4/ip_forward=1 net/ipv4/conf/all/accept_redirects=0 net/ipv4/conf/all/send_redirects=0 net/ipv4/ip_no_pmtu_disc=1 . sudo systemctl restart strongswan-starter . Всё! . Проверка iptables . iptables -L -v -n . Поставить IPV6=NO а потом вернуть . sudo nano /etc/default/ufw . Удалить все правила UFW из iptables . for i in `iptables -L INPUT --line-numbers |grep '[0-9].*ufw' | cut -f 1 -d ' ' | sort -r `; do iptables -D INPUT $i ; done for i in `iptables -L FORWARD --line-numbers |grep '[0-9].*ufw' | cut -f 1 -d ' ' | sort -r `; do iptables -D FORWARD $i ; done for i in `iptables -L OUTPUT --line-numbers |grep '[0-9].*ufw' | cut -f 1 -d ' ' | sort -r `; do iptables -D OUTPUT $i ; done for i in `iptables -L | grep 'Chain .*ufw' | cut -d ' ' -f 2`; do iptables -X $i ; done . Грохнуть iptables . iptables -F . ",
    "url": "/manual_pages/Ubuntu/UFW.html#ufw",
    "relUrl": "/manual_pages/Ubuntu/UFW.html#ufw"
  },"128": {
    "doc": "UFW",
    "title": "UFW",
    "content": "Выяснить почему не работает IPV6=yes . ",
    "url": "/manual_pages/Ubuntu/UFW.html",
    "relUrl": "/manual_pages/Ubuntu/UFW.html"
  },"129": {
    "doc": "UbuntuConfig",
    "title": "UbuntuConfig",
    "content": "Базовая настройка UFW и IEv2 . sudo apt update sudo apt install strongswan strongswan-pki libcharon-extra-plugins libcharon-extauth-plugins . mkdir -p ~/pki/{cacerts,certs,private} chmod 700 ~/pki . Проверить чтобы стояло IPV6=yes . sudo nano /etc/default/ufw . Запретить все входящие, разрешить все исходящие . sudo ufw default deny incoming . sudo ufw default allow outgoing . Разрешить входящие ssh . sudo ufw allow ssh sudo ufw allow 500,4500/udp sudo ufw allow 7777/tcp sudo ufw allow 8080/tcp sudo ufw allow 9418/tcp sudo ufw allow 80/tcp sudo ufw allow 443/tcp . Включить . sudo ufw enable . ",
    "url": "/manual_pages/Ubuntu/UbuntuConfig.html",
    "relUrl": "/manual_pages/Ubuntu/UbuntuConfig.html"
  },"130": {
    "doc": "Amichai",
    "title": "Создать проекты, добавить пакеты",
    "content": ". | Blank Solution . | Создать проекты . | src/ | src/Web (Empty .Net) | src/Presentation (Class Library) | src/Infrastructure (Class Library) | src/Application (Class Library) | src/Domain (Class Library) | requests (Shared Project) | docs (Shared Project) | . | Удалить везде Class1.cs . | Добавить везде референсы | . | Web | Presentation | Infrastructure | Application | . | Presentation | Web | Application | Domain | . | Infrastructure | Infrastructure |   |   | . | Application | Application |   |   | . ",
    "url": "/manual_pages/dotnet/amichai/amichai.html#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%B0%D0%BA%D0%B5%D1%82%D1%8B",
    "relUrl": "/manual_pages/dotnet/amichai/amichai.html#создать-проекты-добавить-пакеты"
  },"131": {
    "doc": "Amichai",
    "title": "Добавить файлы",
    "content": ". | Web - Contracts - v1 - Authentication - Requests - RegisterRequest.cs - LoginRequest.cs - Responses - SuccessResponse.cs - FailedResponse.cs - Posts - Requests - CreatePostRequest.cs - UpdatePostRequest.cs - Responses - PostResponse.cs - ApiRoutes.cs - Options - ApiSwaggerOptions.cs - DependencyInjection.cs | Presentation - Controllers - v1 - AuthenticationController.cs - PostsController.cs - TagsController.cs - ErrorController.cs | Infrastructure - Authentication - JwtSettings.cs - JwtTokenGenerator.cs - Persistence - UserRepository.cs - Services - DateTimeProvider.cs - DependencyInjection.cs | Application - Authentication - Commands - Register - RegisterCommand.cs - RegisterCommandHandler.cs - Common - AuthenticationResult.cs - Queries - Login - LoginQuery.cs - LoginQueryHandler.cs - Common - Interfaces - Authentication - IJwtTokenGenerator.cs - Services - IDateTimeProvider.cs - Persistence - IUserRepository.cs - DependencyInjection.cs | Domain - Entities - User.cs | . ",
    "url": "/manual_pages/dotnet/amichai/amichai.html#%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D1%84%D0%B0%D0%B9%D0%BB%D1%8B",
    "relUrl": "/manual_pages/dotnet/amichai/amichai.html#добавить-файлы"
  },"132": {
    "doc": "Amichai",
    "title": "Добавить пакеты",
    "content": "| Presentation | Infrastructure | Application |———–|—————-|————-| System.Configuration.ConfigurationManager | Microsoft.Extensions.Configuration | Microsoft.Extensions.DependencyInjection |Swashbuckle.AspNetCore | Microsoft.Extensions.Options.ConfigurationExtension |MediatR| Microsoft.AspNetCore.Identity.EntityFrameworkCore | Microsoft.EntityFrameworkCore.SqlServer | MediatR.Extensions.Microsoft.DependencyInjection | - | Microsoft.EntityFrameworkCore.Tools | - | - | Microsoft.AspNetCore.Identity.EntityFrameworkCore | - | - | System.IdentityModel.Tokens.Jwt | - | . ",
    "url": "/manual_pages/dotnet/amichai/amichai.html#%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%B0%D0%BA%D0%B5%D1%82%D1%8B",
    "relUrl": "/manual_pages/dotnet/amichai/amichai.html#добавить-пакеты"
  },"133": {
    "doc": "Amichai",
    "title": "Код",
    "content": "Dependency Injection . Web/DependencyInjection.cs . public static IServiceCollection AddPresentation(this IServiceCollection services) { services.AddIdentity&lt;IdentityUser, IdentityRole&gt;(options =&gt; { options.Password.RequireDigit = false; options.Password.RequireNonAlphanumeric = false; options.Password.RequireUppercase = false; options.Password.RequiredLength = 6; }) .AddRoles&lt;IdentityRole&gt;() .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;(); services.AddSwaggerGen(x =&gt; { x.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo {Title=\"My Api\", Version=\"v1\" }); }); return services; } . Infrastructure/DependencyInjection.cs ``` csharp public static IServiceCollection AddInfrastructure(this IServiceCollection services, ConfigurationManager config) { return services; } ``` Application/DependencyInjection.cs ```csharp public static IServiceCollection AddApplication(this IServiceCollection services) { services.AddMediatR(typeof(DependencyInjection).Assembly); return services; } ``` Web/Program.cs ```csharp var builder = WebApplication.CreateBuilder(args); { builder.Services.AddApplication(); builder.Services.AddInfrastructure(builder.Configuration); builder.Services.AddPresentation(); builder.Services.AddControllers(); } var app = builder.Build(); { app.UseHttpsRedirection(); Assembly presentationAssembly = typeof(Presentation.AssemblyReference).Assembly; app.MapControllers().AddApplicationPart(presentationAssembly); app.Run(); } ``` DateTime Provider . Application . Common/Services/IDateTimeProvider.cs ```csharp public interface IDateTimeProvider { DateTime UtcNow { get; } } ``` Infrastructure . Services/DateTimeProvider.cs ```csharp public class DateTimeProvider : IDateTimeProvider { public DateTime UtcNow =&gt; DateTime.UtcNow; } ``` DependencyInjection.cs Добавить ```csharp services.AddSingleton&lt;IDateTimeProvider, DateTimeProvider&gt;(); ``` DbContext &amp; Unit of Work . Web . appsettings.json ```json \"ConnectionStrings\": { \"DefaultConnection\": \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=Portfolio2022;Integrated Security=True; Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\" } ``` Infrastructure . Persistence/ApplicationDbContext.cs ```csharp public class ApplicationDbContext : IdentityDbContext { public ApplicationDbContext(DbContextOptions options) : base(options) { } public DbSet Users { get; set; } public DbSet Posts { get; set; } } ``` &lt;/details&gt; Persistence/UnitOfWork.cs ```csharp public sealed class UnitOfWork : IUnitOfWork { private readonly ApplicationDbContext _ctx; public UnitOfWork(ApplicationDbContext ctx) { _ctx = ctx; } public Task SaveChangesAsync(CancellationToken cancellationToken = default) { return _ctx.SaveChangesAsync(cancellationToken); } } ``` DependencyInjection.cs ```csharp public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration) { services.AddDbContext(options =&gt; options.UseSqlServer(configuration[\"DefaultConnection\"])); } ``` &lt;/details&gt; **Application** Persistence/IUnitOfWork.cs ```csharp ``` ### Identity **Web** Program.cs ```csharp var builder = WebApplication.CreateBuilder(args); { builder.Services.AddIdentity&lt;IdentityUser, IdentityRole&gt;(options =&gt; { options.Password.RequireDigit = false; options.Password.RequireNonAlphanumeric = false; options.Password.RequireUppercase = false; options.Password.RequiredLength = 6; }) .AddRoles() .AddEntityFrameworkStores(); } var app = builder.Build(); { { IServiceScope scope = app.Services.CreateScope(); ApplicationDbContext ctx = scope.ServiceProvider.GetRequiredService(); UserManager userManager = scope.ServiceProvider.GetRequiredService&lt;UserManager&gt;(); RoleManager roleManager = scope.ServiceProvider.GetRequiredService&lt;RoleManager&gt;(); ctx.Database.EnsureCreated(); IdentityRole adminRole = new IdentityRole(\"Admin\"); if (!ctx.Roles.Any()) { roleManager.CreateAsync(adminRole).GetAwaiter().GetResult(); } if (!ctx.Users.Any(u =&gt; u.UserName == \"admin\")) { IdentityUser adminUser = new IdentityUser { UserName = \"admin\", Email = \"admin@example.com\" }; userManager.CreateAsync(adminUser, \"P@ssword123!\").GetAwaiter().GetResult(); userManager.AddToRoleAsync(adminUser, adminRole.Name).GetAwaiter().GetResult(); } } } ``` &lt;/details&gt; ### User Repository **Domain** Aggregates/User.cs ```csharp public class User { public Guid Id { get; set; } = Guid.NewGuid(); public string FirstName { get; set; } = null!; public string LastName { get; set; } = null!; public string Email { get; set; } = null!; public string Password { get; set; } = null!; } ``` **Application** Persistence/IUserRepository.cs ```csharp public interface IUserRepository { User? GetUserByEmail(string email); void Add(User user); } ``` **Infrastructure** Persistence/UserRepository.cs ```csharp public class UserRepository : IUserRepository { private static readonly List _users = new(); public User? GetUserByEmail(string email) { return _users.SingleOrDefault(u =&gt; u.Email == email); } public void Add(User user) { _users.Add(user); } } ``` &lt;/details&gt; DependencyInjection.cs ```csharp public static class DependencyInjection { public static IServiceCollection AddInfrastructure(this IServiceCollection services) { services.AddScoped&lt;IUserRepository, UserRepository&gt;(); return services; } } ``` ### Post Repository **Domain** Entities/Post.cs ```csharp public class Post : Entity { public DateTime CreationDate { get; set; } public string Author { get; set; } public string Title { get; set; } public string Content { get; set; } public DateTime? DisplayUntil { get; set; } public string UserId { get; set; } public virtual ICollection Tags { get; set; } } ``` &lt;/details&gt; Entities/Tag.cs ```csharp public class Tag : Entity { public string Text { get; set; } public int? PostId { get; set; } [ForeignKey(nameof(PostId))] public Post Post { get; set; } } ``` &lt;/details&gt; Entities/IPostService.cs ```csharp public interface IPostService : ITweetbookAppService&lt;Post,int&gt; { Task&lt;IEnumerable&gt; GetTagsByPostAsync(int postId); Task CreatePostTagAsync(Tag tag); } ``` &lt;/details&gt; Entities/PostService.cs ```csharp public class PostService : TweetbookAppService, IPostService { //private readonly IHttpContextAccessor _httpContextAccessor; //public PostService(DataContext dataContext, IHttpContextAccessor httpContextAccessor) : base(dataContext) //{ // _httpContextAccessor = httpContextAccessor; //} public PostService(DataContext dataContext) : base(dataContext) {} public override async Task UpdateAsync(Post item) { CheckInstanceAvailability(); var itemToUpdate = await GetByIdAsync(item.Id); if (itemToUpdate == null) return await Task.FromResult(false); //The infrastructure evaluates for us via PostOwnershipValidationFilter where applied //But what if the developer forgets to decorate the endpoint with the attribute aforementioned? //In this case, uncomment the line below or adopt a better coding strategy* //if (!CurrentUserIsOwner(itemToUpdate.UserId)) // return await Task.FromResult(false); //*throw new SecurityException(\"Access denied to the request resource or operation\") //DataContext.Set().Update(item); //See next line below //https://stackoverflow.com/questions/7106211/entity-framework-why-explicitly-set-entity-state-to-modified item.UserId = itemToUpdate.UserId; DataContext.Entry(itemToUpdate).CurrentValues.SetValues(item); var updated = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(updated); } public override async Task RemoveAsync(int id) { CheckInstanceAvailability(); var itemToRemove = await GetByIdAsync(id); if (itemToRemove != null) { //The infrastructure evaluates for us via PostOwnershipValidationFilter where applied //But what if the developer forgets to decorate the endpoint with the attribute aforementioned? //In this case, uncomment the line below or adopt a better coding strategy* //if (!CurrentUserIsOwner(itemToRemove.UserId)) // return await Task.FromResult(false); //*throw new SecurityException(\"Access denied to the request resource or operation\") DataContext.Entry(itemToRemove).State = EntityState.Deleted; await DataContext.SaveChangesAsync(); } return await Task.FromResult(true); } public async Task&lt;IEnumerable&gt; GetTagsByPostAsync(int postId) { //TODO: Implement get tags by post id method CheckInstanceAvailability(); return await Task.FromResult(Enumerable.Empty()); } public async Task CreatePostTagAsync(Tag tag) { CheckInstanceAvailability(); var relatedPost = await GetByIdAsync(tag.PostId.Value); if (relatedPost != null) { await DataContext.Tags.AddAsync(tag); var created = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(created ? tag : null); } return await Task.FromResult((Tag)null); } //The infrastructure evaluates for us via PostOwnershipValidationFilter where applied //private bool CurrentUserIsOwner(string postUserId) =&gt; string.Equals(_httpContextAccessor.HttpContext.GetCurrentUserId(), postUserId, StringComparison.Ordinal); } ``` &lt;/details&gt; Entities/IAppService.cs ```csharp public interface ITweetbookAppService&lt;T, TKey&gt; where T : class { Task GetByIdAsync(TKey id); Task&lt;IEnumerable&gt; GetAllAsync(); Task CreateAsync(T item); Task UpdateAsync(T item); Task RemoveAsync(TKey id); } ``` &lt;/details&gt; Entities/AppService.cs ```csharp public abstract class TweetbookAppService : ITweetbookAppService&lt;T, int&gt; where T : Entity { protected DataContext DataContext { get; private set; } public TweetbookAppService(DataContext dataContext) { DataContext = dataContext; } public async virtual Task&lt;IEnumerable&gt; GetAllAsync() { CheckInstanceAvailability(); return await Task.FromResult(DataContext.Set().ToImmutableList()); } public async virtual Task GetByIdAsync(int id) { CheckInstanceAvailability(); return await DataContext.Set().FirstOrDefaultAsync(it =&gt; it.Id == id); } public async virtual Task CreateAsync(T item) { CheckInstanceAvailability(); await DataContext.Set().AddAsync(item); var created = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(created); } public async virtual Task RemoveAsync(int id) { CheckInstanceAvailability(); var itemToRemove = await GetByIdAsync(id); if (itemToRemove != null) { DataContext.Entry(itemToRemove).State = EntityState.Deleted; await DataContext.SaveChangesAsync(); } return await Task.FromResult(true); } public async virtual Task UpdateAsync(T item) { CheckInstanceAvailability(); //DataContext.Set().Update(item); var itemToUpdate = await DataContext.Set().SingleOrDefaultAsync(it =&gt; it.Id == item.Id); if (itemToUpdate == null) return await Task.FromResult(false); //https://stackoverflow.com/questions/7106211/entity-framework-why-explicitly-set-entity-state-to-modified DataContext.Entry(itemToUpdate).CurrentValues.SetValues(item); var updated = await DataContext.SaveChangesAsync() &gt; 0; return await Task.FromResult(updated); } #region IDisposable Support private bool disposedValue = false; // To detect redundant calls protected virtual void Dispose(bool disposing) { if (!disposedValue) { if (disposing) { if (DataContext != null) DataContext.Dispose(); } // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below. // TODO: set large fields to null. disposedValue = true; } } ~TweetbookAppService() { Dispose(false); } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } #endregion protected void CheckInstanceAvailability() { if (disposedValue) throw new ObjectDisposedException(\"This service instance was disposed and is no longer available!\"); } } ``` &lt;/details&gt; ### Authentication **Web** Contracts/v1/Authentication/Requests/RegisterRequest.cs ```csharp public record RegisterRequest( string FirstName, string LastName, string Email, string Password); ``` Contracts/v1/Authentication/Requests/LoginRequest.cs ```csharp public record LoginRequest( string Email, string Password); ``` Contracts/v1/Authentication/Responses/SuccessResponse.cs ```csharp public record SuccessResponse( Guid Id, string FirstName, string LastName, string Email, string Token); ``` Contracts/v1/Authentication/Responses/FailedResponse.cs ```csharp public class FailedResponse { } ``` **Application** Authentication/Common/AuthenticationResult.cs ```csharp public record AuthenticationResult( User User, string Token); ``` Authentication/Commands/Register/RegisterCommand.cs ```csharp public record RegisterCommand( string FirstName, string LastName, string Email, string Password) : IRequest; ``` &lt;/details&gt; Authentication/Commands/Register/RegisterCommandHandler.cs ```csharp public class RegisterCommandHandler : IRequestHandler&lt;RegisterCommand, AuthenticationResult&gt; { private readonly IJwtTokenGenerator _jwttokengenerator; private readonly IUserRepository _userRepository; public RegisterCommandHandler(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository) { _jwttokengenerator = jwtTokenGenerator; _userRepository = userRepository; } public async Task Handle(RegisterCommand command, CancellationToken cancellationToken) { if (_userRepository.GetUserByEmail(command.Email) is not null) { throw new Exception(\"User with given email already exists\"); } var user = new User { FirstName = command.FirstName, LastName = command.LastName, Email = command.Email, Password = command.Password }; _userRepository.Add(user); Guid userId = Guid.NewGuid(); var token = _jwttokengenerator.GenerateToken(user); return new AuthenticationResult( user, token); } } ``` &lt;/details&gt; Authentication/Queries/Login/LoginQuery.cs ```csharp public record LoginQuery(string Email, string Password) : IRequest; ``` &lt;/details&gt; Authentication/Queries/Login/LoginQueryHandler.cs ```csharp public class LoginQueryHandler : IRequestHandler&lt;LoginQuery, AuthenticationResult&gt; { private readonly IJwtTokenGenerator _jwttokengenerator; private readonly IUserRepository _userRepository; public LoginQueryHandler(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository) { _jwttokengenerator = jwtTokenGenerator; _userRepository = userRepository; } public async Task Handle(LoginQuery query, CancellationToken cancellationToken) { if (_userRepository.GetUserByEmail(query.Email) is not User user) { throw new Exception(\"User with given email does not exist\"); } if (user.Password != query.Password) { throw new Exception(\"Invalid password\"); } var token = _jwttokengenerator.GenerateToken(user); return new AuthenticationResult( user, token); } } ``` &lt;/details&gt; **Presentation** Controllers/v1/AuthenticationController.cs ```csharp [ApiController] [Route(\"auth\")] public class AuthenticationController : ControllerBase { private readonly ISender _mediator; public AuthenticationController( IMediator mediator) { _mediator = mediator; } [HttpPost(\"register\")] public async Task Register(RegisterRequest request) { var command = new RegisterCommand(request.FirstName, request.LastName, request.Email, request.Password); var authResult = await _mediator.Send(command); var authResponse = new SuccessResponse( authResult.User.Id, authResult.User.FirstName, authResult.User.LastName, authResult.User.Email, authResult.Token); return Ok(request); } [HttpPost(\"login\")] public async Task Login(LoginRequest request) { var query = new LoginQuery(request.Email, request.Password); var authResult = await _mediator.Send(query); var authResponse = new SuccessResponse( authResult.User.Id, authResult.User.FirstName, authResult.User.LastName, authResult.User.Email, authResult.Token); return Ok(request); } } ``` &lt;/details&gt; ### Swagger **Web** appsettings.Development ```json \"ApiSwaggerOptions\": { \"JsonRoute\": \"swagger/{documentName}/swagger.json\", \"Description\": \"Our API\", \"UIEndpoint\": \"v1/swagger.json\" } ``` Options/ApiSwaggerOptions.cs ```csharp public record ApiSwaggerOptions( string JsonRoute = null!, string UiEndpoint = null!, string Description = null!); ``` DependencyInjection.cs ```csharp services.AddSwaggerGen(x =&gt; { x.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo { Title = \"Api\", Version = \"v1\" }); }); ``` Program.cs Добавить ```csharp var swaggerOptions = new ApiSwaggerOptions(); builder.Configuration.GetSection(nameof(ApiSwaggerOptions)) .Bind(swaggerOptions); app.UseSwagger(option =&gt; { option.RouteTemplate = swaggerOptions.JsonRoute; }); app.UseSwaggerUI(option =&gt; { option.SwaggerEndpoint(swaggerOptions.UiEndpoint, swaggerOptions.Description); }); ``` ### JWT ## Тесты - Создать проекты - tests/ - tests/**Architecture.Tests** ## Другое - В корне создать dockerfile ```dockerfile FROM httpd:alpine COPY ./html/ /usr/local/apache2/htdocs/ ``` - Докер bash-команды `docker images` `docker build -t hello-docker:1.0.0 .` - http-запросы VS Code **requests**/Authentication/Register.http ```http @host=https://localhost:7056 POST /auth/register Content-type: application/json { \"firstName\": \"Anton\", \"lastName\": \"K\", \"email\": \"ak@example.com\", \"password\": \"P@ssword123!\" } ``` **requests**/Authentication/Login.http ```http @host=https://localhost:7056 POST /auth/login Content-type: application/json { \"email\": \"ak@example.com\", \"password\": \"P@ssword123!\" } ``` - Установка сервисов ASP.NET через Assembly IInstaller.cs ```csharp public interface IInstaller { void InstallServices(IServiceCollection services, IConfiguration configuration); } ``` InstallerExtensions.cs ```csharp public static class InstallerExtensions { //Вызвать в services Program.cs public static void InstallServicesInAssembly(this IServiceCollection services, IConfiguration configuration) { var installers = typeof(Program).Assembly.ExportedTypes.Where(x =&gt; typeof(IInstaller).IsAssignableFrom(x) &amp;&amp; !x.IsInterface &amp;&amp; !x.IsAbstract) //Найти все классы реализующие IInstaller, которые не интерфейсы и не абстрактные .Select(Activator.CreateInstance) //Создать экземпляр каждого .Cast() //Привести к типу IInstaller .ToList(); //Сделать List installers.ForEach(installer =&gt; installer.InstallServices(services, configuration)); } } ``` &lt;/details&gt; ",
    "url": "/manual_pages/dotnet/amichai/amichai.html#%D0%BA%D0%BE%D0%B4",
    "relUrl": "/manual_pages/dotnet/amichai/amichai.html#код"
  },"134": {
    "doc": "Amichai",
    "title": "Amichai",
    "content": " ",
    "url": "/manual_pages/dotnet/amichai/amichai.html",
    "relUrl": "/manual_pages/dotnet/amichai/amichai.html"
  },"135": {
    "doc": "Interview questions",
    "title": "Interview questions",
    "content": " ",
    "url": "/manual_pages/dotnet/interview/interview.html",
    "relUrl": "/manual_pages/dotnet/interview/interview.html"
  },"136": {
    "doc": "ASP.NET Razor Views Project",
    "title": "Developer Command Prompt for VS 2022",
    "content": "VsDevCmd.bat dotnet --help Все команды CLI dotnet dotnet run Запуск проекта . ",
    "url": "/manual_pages/dotnet/razorviews/razorviews.html#developer-command-prompt-for-vs-2022",
    "relUrl": "/manual_pages/dotnet/razorviews/razorviews.html#developer-command-prompt-for-vs-2022"
  },"137": {
    "doc": "ASP.NET Razor Views Project",
    "title": "ASP.NET Razor Views Project",
    "content": " ",
    "url": "/manual_pages/dotnet/razorviews/razorviews.html",
    "relUrl": "/manual_pages/dotnet/razorviews/razorviews.html"
  },"138": {
    "doc": "Richter",
    "title": "Добавить в PATH:",
    "content": "csc.exe: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 (Из этой директории компилятор достает MSCorLib.dll) ildasm, gacutil: C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools . ",
    "url": "/manual_pages/dotnet/richter/richter.html#%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%B2-path",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#добавить-в-path"
  },"139": {
    "doc": "Richter",
    "title": "Скомпилировать один Program.cs в .exe",
    "content": "(Building Types into a Module) . csc.exe Program.cs (Выполнить в папке, где есть Program.cs) Нужно использовать в файле using System; вместо использования на компиляции /r:MSCorLib.dll /out:Program.exe /t:exe задавать вручную не нужно, это значения по умолчанию или задать параметры явно: csc.exe /out:Program.exe /t:exe /r:MSCorLib.dll Program.cs . ",
    "url": "/manual_pages/dotnet/richter/richter.html#%D1%81%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD-programcs-%D0%B2-exe",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#скомпилировать-один-programcs-в-exe"
  },"140": {
    "doc": "Richter",
    "title": "Ildasm",
    "content": "ILDasm Program.exe в папке с Program.exe Ctrl+M посмотреть метадату View/Statistics посмотреть статистику . Что такое CLR-assembly: To summarize, an assembly is a unit of reuse, versioning, and security. It allows you to partition your types and resources into separate files so that you, and consumers of your assembly, get to determine which files to package together and deploy. After the CLR loads the file containing the manifest, it can determine which of the assembly’s other files contain the types and resources the application is referencing. Anyone consuming the assembly is required to know only the name of the file containing the manifest; the file partitioning is then abstracted away from the consumer and can change in the future without breaking the application’s behavior. If you have multiple types that can share a single version number and security settings, it is recommended that you place all of the types in a single file rather than spread the types out over separate files, let alone separate assemblies. The reason is performance. Loading a file/assembly takes the CLR and Windows time to find the assembly, load it, and initialize it. The fewer files/assemblies loaded the better, because loading fewer assemblies helps reduce working set and also reduces fragmentation of a process’s address space. Finally, NGen.exe can perform better optimizations when processing larger files. ",
    "url": "/manual_pages/dotnet/richter/richter.html#ildasm",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#ildasm"
  },"141": {
    "doc": "Richter",
    "title": "Скомпилировать один Program.cs в .dll",
    "content": "В папке с FUT.cs и RUT.cs csc /out:MultiFileLibrary.dll /t:library /addmodule:RUT.netmodule FUT.cs . ",
    "url": "/manual_pages/dotnet/richter/richter.html#%D1%81%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BE%D0%B4%D0%B8%D0%BD-programcs-%D0%B2-dll",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#скомпилировать-один-programcs-в-dll"
  },"142": {
    "doc": "Richter",
    "title": "Strongly named &amp; weakly named assemblies",
    "content": " ",
    "url": "/manual_pages/dotnet/richter/richter.html#strongly-named--weakly-named-assemblies",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#strongly-named--weakly-named-assemblies"
  },"143": {
    "doc": "Richter",
    "title": "Public Assembly Key",
    "content": " ",
    "url": "/manual_pages/dotnet/richter/richter.html#public-assembly-key",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#public-assembly-key"
  },"144": {
    "doc": "Richter",
    "title": "GAC",
    "content": "Обычно находится в %SystemRoot%\\Microsoft.NET\\Assembly GACUtil.exe для того чтобы добавлять в GAC сборки. Руками не добавлять! В GAC устанавливаются только strongly named сборки . ",
    "url": "/manual_pages/dotnet/richter/richter.html#gac",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#gac"
  },"145": {
    "doc": "Richter",
    "title": "Delay signing",
    "content": " ",
    "url": "/manual_pages/dotnet/richter/richter.html#delay-signing",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#delay-signing"
  },"146": {
    "doc": "Richter",
    "title": "Types",
    "content": "class Employee {...} идентично class Employee : System.Object {...} Все типы наследуют от System.Object, поэтому у все есть методы: Public: Equals, GetHashCode, ToString, GetType Protected: MemberwiseClone, Finalize . ",
    "url": "/manual_pages/dotnet/richter/richter.html#types",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#types"
  },"147": {
    "doc": "Richter",
    "title": "Оператор new",
    "content": ". | Вычисляет количество байт для всех филдов, которые будут в экземпляре | Аллоцирует память, присваивает нули | Инициализирует type object pointer объекта и sync block index members | Вызывает конструктора | . ",
    "url": "/manual_pages/dotnet/richter/richter.html#%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80-new",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#оператор-new"
  },"148": {
    "doc": "Richter",
    "title": "Casting через cast expression ака скобки",
    "content": ". | Object o = new Employee(); Ок | Employee e = (Employee) o; Ок | internal class Employee internal class Manager : Employee ... Object o = new DateTime(); Empoyee e = (Employee) o; . Не Ок . | . ",
    "url": "/manual_pages/dotnet/richter/richter.html#casting-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-cast-expression-%D0%B0%D0%BA%D0%B0-%D1%81%D0%BA%D0%BE%D0%B1%D0%BA%D0%B8",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#casting-через-cast-expression-ака-скобки"
  },"149": {
    "doc": "Richter",
    "title": "Операторы через is и as",
    "content": "is возвращает true если типы совместимы Всегда null для false . as присваивает ссылку на объект или null если типы несовместимы . Employee e = o as Employee; if (e != null) { // Use e within the 'if' statement. } . Разница с кастом скобками в том, что при as тип проверяется один раз. ",
    "url": "/manual_pages/dotnet/richter/richter.html#%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D1%8B-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-is-%D0%B8-as",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#операторы-через-is-и-as"
  },"150": {
    "doc": "Richter",
    "title": "Compile time error (CTE) vs Run Time Error (RTE)",
    "content": "Страница 123 . ",
    "url": "/manual_pages/dotnet/richter/richter.html#compile-time-error-cte-vs-run-time-error-rte",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#compile-time-error-cte-vs-run-time-error-rte"
  },"151": {
    "doc": "Richter",
    "title": "Run time 127",
    "content": ". | В процессе много? тредов. | Метод ?= тред | Стек идет от high memory address к low memory address | У всех кроме самых простых методов есть prologue code и epilogue code. Стр. 103 . | Создается один процесс. В него загружается CLR. | Для каждого треда аллоцируется 1-MB стек (thread stack). | Этот стек и будет использоваться для передачи аргументов к методу и для хранения локальных переменных | Когда метод начинает выполняться, пролог-код метода аллоцирует память для для локальных переменных метода | . ",
    "url": "/manual_pages/dotnet/richter/richter.html#run-time-127",
    "relUrl": "/manual_pages/dotnet/richter/richter.html#run-time-127"
  },"152": {
    "doc": "Richter",
    "title": "Richter",
    "content": " ",
    "url": "/manual_pages/dotnet/richter/richter.html",
    "relUrl": "/manual_pages/dotnet/richter/richter.html"
  }
}
